{"version":3,"sources":["hooks/useUploadImage.js","components/EditProfile/BasicInfoForm.js","components/EditProfile/UpdatePasswordForm.js","components/EditProfile/AccountDeleteForm.js","components/EditProfile/SecurityInfoForm.js","pages/EditProfilePage.js"],"names":["useUploadImage","useState","status","errorText","undefined","imageError","setImageError","setImageFilename","imageSrc","setImageSrc","useEffect","setTimeout","imageChangeHandler","event","file","target","files","reader","FileReader","addEventListener","includes","type","size","result","name","readAsDataURL","BasicInfoForm","dispatch","useDispatch","history","useHistory","username","useSelector","state","user","userName","userProfileImage","userFullName","retBio","bio","fName","setFName","lName","setLName","setBio","UISliceActions","setPageLoading","isPageLoading","loadUserDataUsingToken","nameArray","split","firstName","secondName","i","length","border","base","lg","borderRadius","style","padding","encType","onSubmit","preventDefault","formData","FormData","append","profileImage","updateUser","then","replace","setToastData","success","msg","paddingY","htmlFor","id","hidden","onChange","accept","className","src","boxSize","as","MdFileUpload","color","fontSize","placeholder","my","value","isRequired","e","resize","rows","maxLength","direction","mt","p","spacing","colorScheme","w","onClick","UpdatePasswordForm","currentPassword","setCurrentPassword","newPassword","setNewPassword","confirmPassword","setConfirmPassword","userId","align","templateColumns","sm","gap","display","justifyContent","width","showToast","updateUserPassword","console","log","AccountDeleteForm","password","setPassword","md","marginY","variant","alert","deleteUserAccount","push","SecurityInfoForm","maxW","EditProfile","maxWidth","isFitted","mb"],"mappings":"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","file":"static/js/16.916bede2.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nfunction useUploadImage() {\r\n  const [imageError, setImageError] = useState({\r\n    status: false,\r\n    errorText: undefined,\r\n  });\r\n  const [imageFilename, setImageFilename] = useState(\"\");\r\n  const [imageSrc, setImageSrc] = useState(\"\");\r\n\r\n  const imageChangeHandler = (event) => {\r\n    const file = event.target.files[0];\r\n\r\n    if (file !== undefined) {\r\n      const reader = new FileReader(file);\r\n\r\n      reader.addEventListener(\"load\", () => {\r\n        const allowedFileTypes = [\"image/png\", \"image/jpeg\"];\r\n        if (!allowedFileTypes.includes(file.type)) {\r\n          setImageError({\r\n            status: true,\r\n            errorText: \"Only images should be uploaded\",\r\n          });\r\n          return;\r\n        }\r\n\r\n        if (file.size > 4000000) {\r\n          setImageError({\r\n            status: true,\r\n            errorText: \"Image size should not be more than 4mb\",\r\n          });\r\n          return;\r\n        }\r\n\r\n        setImageError({ status: false, errorText: undefined });\r\n        setImageSrc(reader.result);\r\n        setImageFilename(file.name);\r\n      });\r\n\r\n      reader.readAsDataURL(file);\r\n    } else {\r\n      setImageSrc(\"\");\r\n      setImageFilename(\"\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (imageError.status === true) {\r\n      setTimeout(() => {\r\n        setImageError({ status: false, errorText: undefined });\r\n      }, 1500);\r\n    }\r\n  }, [imageError.status]);\r\n\r\n  return {\r\n    imageError,\r\n    setImageFilename,\r\n    setImageError,\r\n    imageChangeHandler,\r\n    imageSrc,\r\n    setImageSrc,\r\n  };\r\n}\r\n\r\nexport default useUploadImage;\r\n","import {\r\n  Avatar,\r\n  AvatarBadge,\r\n  Box,\r\n  Button,\r\n  FormControl,\r\n  FormLabel,\r\n  Icon,\r\n  Input,\r\n  Stack,\r\n  Text,\r\n  Textarea,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { MdFileUpload } from \"react-icons/md\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport useUploadImage from \"../../hooks/useUploadImage\";\r\nimport { loadUserDataUsingToken, updateUser } from \"../../store/user-actions\";\r\nimport { UISliceActions } from \"../../store/UISlice\";\r\nimport setToastData from \"../../utils/showToast\";\r\n\r\nfunction BasicInfoForm() {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const { imageError, imageChangeHandler, imageSrc, setImageSrc } =\r\n    useUploadImage();\r\n\r\n  const username = useSelector((state) => state.user.userName);\r\n\r\n  const {\r\n    userProfileImage,\r\n    userFullName,\r\n    bio: retBio,\r\n  } = useSelector((state) => state.user);\r\n\r\n  const [fName, setFName] = useState(\"\");\r\n  const [lName, setLName] = useState(\"\");\r\n  const [bio, setBio] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    dispatch(UISliceActions.setPageLoading({ isPageLoading: true }));\r\n    dispatch(loadUserDataUsingToken());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (userFullName && userFullName !== \"\") {\r\n      const nameArray = userFullName.split(\" \");\r\n      const firstName = nameArray[0];\r\n      let secondName = \"\";\r\n      for (let i = 1; i < nameArray.length; i++) secondName += nameArray[i];\r\n      setFName(firstName);\r\n      setLName(secondName);\r\n    }\r\n    if (retBio) {\r\n      setBio(retBio);\r\n    }\r\n    if (userProfileImage) {\r\n      setImageSrc(userProfileImage);\r\n    }\r\n    dispatch(UISliceActions.setPageLoading({ isPageLoading: false }));\r\n  }, [userFullName, retBio, userProfileImage]);\r\n\r\n  const formSubmitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const formData = new FormData();\r\n\r\n    if (fName === \"\" || lName === \"\" || bio === \"\") {\r\n      setToastData(dispatch, {\r\n        success: false,\r\n        msg: \"Please fill all the textfields\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    formData.append(\"name\", fName + \" \" + lName);\r\n    formData.append(\"bio\", bio);\r\n    if (imageSrc !== \"\") {\r\n      formData.append(\"profileImage\", event.target.profileImage.files[0]);\r\n    }\r\n\r\n    dispatch(updateUser(formData)).then(() => {\r\n      history.replace(\"/profile/\" + username);\r\n    });\r\n  };\r\n\r\n  const formCancelHandler = () => {\r\n    if (fName === \"\" || lName === \"\" || bio === \"\") {\r\n      setToastData(dispatch, {\r\n        success: false,\r\n        msg: \"Please save the necessary details\",\r\n      });\r\n      return;\r\n    }\r\n    history.replace(\"/\");\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      border={{ base: \"1px solid\", lg: \"1px solid #ccc\" }}\r\n      borderRadius=\"12px\"\r\n    >\r\n      <form\r\n        style={{ padding: \"0px 32px\" }}\r\n        encType=\"multipart/form-data\"\r\n        onSubmit={formSubmitHandler}\r\n      >\r\n        <Box paddingY=\"12px\">\r\n          <FormLabel htmlFor=\"profile-picture-upload\">\r\n            Set a profile picture\r\n          </FormLabel>\r\n          <input\r\n            type=\"file\"\r\n            id=\"profile-picture-upload\"\r\n            hidden\r\n            onChange={imageChangeHandler}\r\n            accept=\"image/png image/jpg\"\r\n            name=\"profileImage\"\r\n          ></input>\r\n          <label htmlFor=\"profile-picture-upload\">\r\n            <div className=\"profile-setup-image__wrapper\">\r\n              <Avatar size=\"xl\" src={imageSrc}>\r\n                <AvatarBadge border=\"none\" boxSize=\"1.2em\">\r\n                  <Icon as={MdFileUpload} />\r\n                </AvatarBadge>\r\n              </Avatar>\r\n            </div>\r\n          </label>\r\n          {imageError.status && (\r\n            <Text color=\"red.500\" fontSize=\"12px\">\r\n              {imageError.errorText}\r\n            </Text>\r\n          )}\r\n        </Box>\r\n\r\n        <Input\r\n          placeholder=\"First name\"\r\n          size=\"md\"\r\n          my=\"12px\"\r\n          value={fName}\r\n          isRequired\r\n          onChange={(e) => setFName(e.target.value)}\r\n        />\r\n        <Input\r\n          placeholder=\"Last name\"\r\n          size=\"md\"\r\n          my=\"12px\"\r\n          value={lName}\r\n          isRequired\r\n          onChange={(e) => setLName(e.target.value)}\r\n        />\r\n\r\n        <FormControl id=\"bioInput\">\r\n          <FormLabel htmlFor=\"bioTextArea\">Add a bio</FormLabel>\r\n          <Textarea\r\n            id=\"bioTextArea\"\r\n            resize=\"none\"\r\n            rows=\"6\"\r\n            value={bio}\r\n            name=\"bio\"\r\n            isRequired\r\n            maxLength=\"100\"\r\n            onChange={(e) => setBio(e.target.value)}\r\n          ></Textarea>\r\n        </FormControl>\r\n\r\n        <Stack direction=\"row\" mt=\"24px\" p=\"4px\" spacing=\"24px\">\r\n          <Button type=\"submit\" colorScheme=\"green\" w=\"100%\">\r\n            Submit\r\n          </Button>\r\n          <Button colorScheme=\"blue\" w=\"100%\" onClick={formCancelHandler}>\r\n            Skip\r\n          </Button>\r\n        </Stack>\r\n      </form>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default BasicInfoForm;\r\n","import React from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  FormControl,\r\n  FormLabel,\r\n  Grid,\r\n  GridItem,\r\n  Input,\r\n  VStack,\r\n} from \"@chakra-ui/react\";\r\nimport { updateUserPassword } from \"../../store/user-actions\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport showToast from \"../../utils/showToast\";\r\n\r\nconst UpdatePasswordForm = () => {\r\n  const [currentPassword, setCurrentPassword] = useState(\"\");\r\n  const [newPassword, setNewPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const userId = useSelector((state) => state.user.userId);\r\n  const dispatch = useDispatch();\r\n\r\n  const passwordUpdateHandler = () => {\r\n    if (\r\n      currentPassword.length + newPassword.length + confirmPassword.length <\r\n      18\r\n    ) {\r\n      showToast(dispatch, { msg: \"Password length atleast 6\" });\r\n      return;\r\n    }\r\n\r\n    if (newPassword !== confirmPassword) {\r\n      showToast(dispatch, {\r\n        msg: \"Please confirm new password correctly.\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    dispatch(updateUserPassword(currentPassword, newPassword, userId)).then(\r\n      () => {\r\n        console.log(\"Reset\");\r\n        setCurrentPassword(\"\");\r\n        setNewPassword(\"\");\r\n        setConfirmPassword(\"\");\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <VStack spacing={6} align=\"stretch\" className=\"security-info__form\">\r\n      <FormControl isRequired>\r\n        <Grid\r\n          templateColumns={{\r\n            base: \"repeat(1,1fr)\",\r\n            sm: \"repeat(2, 1fr)\",\r\n          }}\r\n          gap={4}\r\n        >\r\n          <GridItem>\r\n            <FormLabel htmlFor=\"currentPasswordInput\">\r\n              Enter current password:{\" \"}\r\n            </FormLabel>\r\n          </GridItem>\r\n\r\n          <GridItem>\r\n            <Input\r\n              id=\"currentPasswordInput\"\r\n              type=\"password\"\r\n              value={currentPassword}\r\n              onChange={(e) => setCurrentPassword(e.target.value)}\r\n            />\r\n          </GridItem>\r\n        </Grid>\r\n      </FormControl>\r\n\r\n      <FormControl isRequired>\r\n        <Grid\r\n          templateColumns={{\r\n            base: \"repeat(1,1fr)\",\r\n            sm: \"repeat(2, 1fr)\",\r\n          }}\r\n          gap={4}\r\n        >\r\n          <GridItem>\r\n            <FormLabel htmlFor=\"newPasswordInput\">\r\n              Enter new password:{\" \"}\r\n            </FormLabel>\r\n          </GridItem>\r\n          <GridItem>\r\n            <Input\r\n              id=\"newPasswordInput\"\r\n              type=\"password\"\r\n              value={newPassword}\r\n              onChange={(e) => setNewPassword(e.target.value)}\r\n            />\r\n          </GridItem>\r\n        </Grid>\r\n      </FormControl>\r\n\r\n      <FormControl isRequired>\r\n        <Grid\r\n          templateColumns={{\r\n            base: \"repeat(1,1fr)\",\r\n            sm: \"repeat(2, 1fr)\",\r\n          }}\r\n          gap={4}\r\n        >\r\n          <GridItem>\r\n            <FormLabel htmlFor=\"confirmNewPasswordInput\">\r\n              Confirm new password:{\" \"}\r\n            </FormLabel>\r\n          </GridItem>\r\n          <GridItem>\r\n            <Input\r\n              id=\"confirmNewPasswordInput\"\r\n              type=\"password\"\r\n              onChange={(e) => setConfirmPassword(e.target.value)}\r\n              value={confirmPassword}\r\n            />\r\n          </GridItem>\r\n        </Grid>\r\n      </FormControl>\r\n\r\n      <Box display=\"flex\" justifyContent=\"end\">\r\n        <Button\r\n          colorScheme=\"teal\"\r\n          width=\"fit-content\"\r\n          onClick={passwordUpdateHandler}\r\n        >\r\n          Save changes\r\n        </Button>\r\n      </Box>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default UpdatePasswordForm;\r\n","import React from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  FormControl,\r\n  FormLabel,\r\n  Grid,\r\n  GridItem,\r\n  Input,\r\n  VStack,\r\n} from \"@chakra-ui/react\";\r\nimport { deleteUserAccount } from \"../../store/user-actions\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst AccountDeleteForm = () => {\r\n  const history = useHistory();\r\n  const userId = useSelector((state) => state.user.userId);\r\n  const [password, setPassword] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n\r\n  const accountDeleteHandler = (event) => {\r\n    event.preventDefault();\r\n    if (password.length < 6) {\r\n      alert(\"Password should be atleast 6 chars long\");\r\n      return;\r\n    }\r\n\r\n    dispatch(deleteUserAccount(password, userId)).then(() => {\r\n      history.push(\"/\");\r\n    });\r\n  };\r\n\r\n  return (\r\n    <form className=\"security-info__form\">\r\n      <Box fontSize={{ md: \"24px\" }} marginY=\"20px\">\r\n        Delete your account :\r\n      </Box>\r\n      <VStack spacing={6} align=\"stretch\">\r\n        <FormControl isRequired>\r\n          <Grid\r\n            templateColumns={{\r\n              base: \"repeat(1,1fr)\",\r\n              sm: \"repeat(2, 1fr)\",\r\n            }}\r\n            gap={4}\r\n          >\r\n            <GridItem>\r\n              <FormLabel htmlFor=\"passwordInput\">\r\n                Enter current password:{\" \"}\r\n              </FormLabel>\r\n            </GridItem>\r\n\r\n            <GridItem>\r\n              <Input\r\n                id=\"passwordInput\"\r\n                type=\"password\"\r\n                onChange={(e) => setPassword(e.target.value)}\r\n              />\r\n            </GridItem>\r\n          </Grid>\r\n        </FormControl>\r\n        <Box display=\"flex\" justifyContent=\"end\">\r\n          <Button\r\n            colorScheme=\"red\"\r\n            variant=\"solid\"\r\n            onClick={accountDeleteHandler}\r\n          >\r\n            Delete Account\r\n          </Button>\r\n        </Box>\r\n      </VStack>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AccountDeleteForm;\r\n","import React from \"react\";\r\nimport { Box, Center, Container, Heading } from \"@chakra-ui/react\";\r\n\r\nimport UpdatePasswordForm from \"./UpdatePasswordForm\";\r\nimport AccountDeleteForm from \"./AccountDeleteForm\";\r\n\r\nfunction SecurityInfoForm() {\r\n  return (\r\n    <Container maxW=\"lg\">\r\n      <Center>\r\n        <Heading as=\"h3\">Security</Heading>\r\n      </Center>\r\n\r\n      <Box fontSize={{ md: \"24px\" }} marginY=\"20px\">\r\n        Update your password:{\" \"}\r\n      </Box>\r\n      <Box as=\"form\">\r\n        <UpdatePasswordForm />\r\n      </Box>\r\n      <AccountDeleteForm />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default SecurityInfoForm;\r\n","import {\r\n  Container,\r\n  Tab,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n} from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport BasicInfoForm from \"../components/EditProfile/BasicInfoForm\";\r\nimport SecurityInfoForm from \"../components/EditProfile/SecurityInfoForm\";\r\n\r\nfunction EditProfile() {\r\n  return (\r\n    <Container maxWidth=\"600px\">\r\n      <Tabs isFitted variant=\"enclosed\">\r\n        <TabList mb=\"1em\">\r\n          <Tab>Basic Information</Tab>\r\n          <Tab>Security</Tab>\r\n        </TabList>\r\n        <TabPanels>\r\n          <TabPanel>\r\n            <BasicInfoForm />\r\n          </TabPanel>\r\n          <TabPanel>\r\n            <SecurityInfoForm />\r\n          </TabPanel>\r\n        </TabPanels>\r\n      </Tabs>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default EditProfile;\r\n"],"sourceRoot":""}