{"version":3,"sources":["store/post-actions.js","assets/Search-amico.svg","components/Profile/NoPostsFound.js","components/Post/PostFooter.js","components/Comment/Comment.js","components/Comment/Comments.js","components/Comment/CommentInput.js","components/Comment/LatestComments.js","components/Post/PostContextMenu.js","components/Post/PostHeader.js","components/Post/PostSkeleton.js","components/Post/PostImage.js","store/comment-actions.js","components/Post/PostBox.js","components/Post/Post.js","store/feed-actions.js","components/Feed/Timeline/Feed.js","components/Feed/Sidebar/Sidebar.js","components/Feed/RightBar/UserDetailsCard.js","components/Feed/RightBar/RightBar.js","pages/FeedPage.js"],"names":["createNewPost","formData","dispatch","a","setProcess","setLoadingProcess","routeInstance","post","then","response","data","resData","setResultProcess","UISliceActions","toggleModalVisibility","feedSliceActions","addNewPost","catch","error","console","log","likeDislikePostHandler","postId","url","method","headers","postDeleteActionHandler","Promise","resolve","reject","status","deletePost","commentDeleteActionHandler","commentId","setToastData","NoPostsFound","textAlign","paddingX","paddingY","maxWidth","marginX","src","NoPostsImage","fontSize","PostFooter","props","useState","isChanged","setIsChanged","size","setSize","useEffect","marginY","spacing","as","isLiked","MdFavorite","MdFavoriteBorder","h","w","className","onMouseDown","onLikeButtonClick","color","commentVisibility","MdModeComment","MdComment","onClick","onCommentButtonClick","Comment","useDispatch","deleteCommentProccessActive","setDeleteCommentProccessActive","commentData","userId","userProfileImage","profileImage","username","_id","commentText","owner","padding","backgroundColor","marginBottom","d","mt","opacity","flexBasis","to","height","width","name","mr","flexGrow","display","fontWeight","base","sm","md","lg","textOverflow","onCommentDelete","React","memo","Comments","comments","setComments","isLoading","setIsLoading","loadComments","err","message","commentRemoveHandler","commentsTemp","index","findIndex","comment","splice","onLatestCommentDelete","commentList","map","borderBottom","borderTop","mx","py","rounded","CommentInput","useSelector","state","user","userFullname","userName","text","setText","isDisabled","commentPostHandler","appendComment","p","alignItems","flexShrink","justifyContent","alignContent","overflow","variant","placeholder","onChange","e","target","value","cursor","disabled","LatestComments","latestComments","undefined","_","first","reverse","length","mb","PostContextMenu","postDeletePossible","isOpen","setIsOpen","onClose","cancelRef","useRef","leastDestructiveRef","ref","colorScheme","ml","AiOutlineEllipsis","PostHeader","userProfileSrc","px","PostSkeleton","boxShadow","bg","noOfLines","PostImage","imageSrc","getLatestComments","setLatestComments","PostBox","styles","useStyleConfig","__css","children","Post","postData","isPostDataLoading","setIsPostDataLoading","setIsLiked","likes","likesCount","setLikesCount","commentsVisibility","setCommentsVisibility","likedConst","includes","fetchLatestComments","postLikeActivityHandler","prevState","prevCount","likeDislikePost","commentsVisibilityHandler","newCommentAppendHandler","useCallback","newCommentData","latestCommentsTemp","unshift","latestCommentRemoveHandler","PostContent","desc","postImage","loadTimelinePosts","page","setMorePostsBoolean","setTimelinePosts","Feed","feed","timelinePosts","morePosts","loading","setLoading","loadPosts","pageIncreaseHandler","incrementPage","flex","bgColor","minHeight","dataLength","next","hasMore","loader","endMessage","style","thickness","speed","emptyColor","Sidebar","pos","top","left","UserDetailsCard","userData","background","border","setLogoutAlertVisibility","isLogoutAlertVisible","outline","RightBar","position","flexDirection","paddingLeft","_hover","bgGradient","_active","borderWidth","SuggestedUserList","count","FeedPage"],"mappings":"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","file":"static/js/8.c031f980.chunk.js","sourcesContent":["import routeInstance from \"../routes.instance\";\r\nimport setToastData from \"../utils/showToast\";\r\nimport { feedSliceActions } from \"./feedSlice\";\r\n\r\nimport setProcess from \"../utils/setProcess\";\r\nimport { UISliceActions } from \"./UISlice\";\r\n\r\nexport const createNewPost = (formData) => async (dispatch) => {\r\n  setProcess.setLoadingProcess(dispatch, \"Uploading your post\");\r\n  routeInstance\r\n    .post(\"/api/posts/newpost\", formData)\r\n    .then(async (response) => {\r\n      const resData = await response.data;\r\n\r\n      setProcess.setResultProcess(dispatch, true, \"Post Uploaded\");\r\n      dispatch(UISliceActions.toggleModalVisibility());\r\n      dispatch(feedSliceActions.addNewPost(resData.data));\r\n    })\r\n    .catch((error) => {\r\n      console.log(error);\r\n\r\n      setProcess.setResultProcess(dispatch, false, \"Upload Error\");\r\n    });\r\n};\r\n\r\nexport const checkLikeStatus = async (postId) => {\r\n  try {\r\n    const accessToken = localStorage.getItem(\"accessToken\");\r\n\r\n    const response = await routeInstance(`/api/posts/${postId}/likestatus`, {\r\n      headers: { Authorization: \"Bearer \" + accessToken },\r\n    });\r\n\r\n    const data = await response.data;\r\n\r\n    if (data.likeState === true) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const likeDislikePostHandler = (postId) => async (dispatch) => {\r\n  try {\r\n    const response = await routeInstance({\r\n      url: `/api/posts/${postId}/like`,\r\n      method: \"POST\",\r\n      headers: {},\r\n    });\r\n\r\n    console.log(response);\r\n    const data = await response.data;\r\n\r\n    console.log(data);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const postDeleteActionHandler = (postId) => {\r\n  return (dispatch) => {\r\n    return new Promise(async (resolve, reject) => {\r\n      setProcess.setLoadingProcess(dispatch, \"Deleting your post\");\r\n      try {\r\n        const response = await routeInstance({\r\n          url: `/api/posts/${postId}`,\r\n          method: \"DELETE\",\r\n          headers: {},\r\n        });\r\n\r\n        if (response.status === 200) {\r\n          dispatch(feedSliceActions.deletePost(postId));\r\n          setProcess.setResultProcess(dispatch, true, \"Post Deleted\");\r\n          return resolve(\"Post deleted\");\r\n        }\r\n      } catch (error) {\r\n        setProcess.setResultProcess(dispatch, false, \"Operation failed\");\r\n      }\r\n    });\r\n  };\r\n};\r\n\r\nexport const commentDeleteActionHandler = (commentId, postId) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await routeInstance({\r\n        method: \"delete\",\r\n        url: `/api/comments/${commentId}`,\r\n        headers: {},\r\n        data: {\r\n          postId,\r\n        },\r\n      });\r\n      const resData = await response.data;\r\n      setToastData(dispatch, { ...resData });\r\n    } catch (err) {\r\n      setToastData(dispatch);\r\n    }\r\n  };\r\n};\r\n","export default __webpack_public_path__ + \"static/media/Search-amico.72117529.svg\";","import React from \"react\";\r\nimport { Box, Image, Text } from \"@chakra-ui/react\";\r\nimport NoPostsImage from \"../../assets/Search-amico.svg\";\r\n\r\nfunction NoPostsFound() {\r\n  return (\r\n    <Box\r\n      textAlign=\"center\"\r\n      paddingX=\"20px\"\r\n      paddingY=\"28px\"\r\n      maxWidth=\"400px\"\r\n      marginX=\"auto\"\r\n    >\r\n      <Image src={NoPostsImage} />\r\n      <Text fontSize=\"xl\" textAlign=\"center\">\r\n        No posts found\r\n      </Text>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default NoPostsFound;\r\n","import { useEffect, useState } from \"react\";\r\nimport { Box, Icon, HStack } from \"@chakra-ui/react\";\r\nimport { MdFavoriteBorder } from \"react-icons/md\";\r\nimport { MdFavorite } from \"react-icons/md\";\r\nimport { MdComment } from \"react-icons/md\";\r\nimport { MdModeComment } from \"react-icons/md\";\r\n\r\nimport React from \"react\";\r\n\r\nfunction PostFooter(props) {\r\n  const [isChanged, setIsChanged] = useState(false);\r\n  const [size, setSize] = useState(\"large\");\r\n  useEffect(() => {\r\n    if (isChanged) {\r\n      setSize(\"small\");\r\n    }\r\n\r\n    return () => {\r\n      setIsChanged(false);\r\n    };\r\n  }, [isChanged]);\r\n\r\n  const likeButtonHandler = () => {\r\n    setIsChanged(true);\r\n    props.onLikeButtonClick();\r\n  };\r\n\r\n  return (\r\n    <Box marginY=\"10px\">\r\n      <HStack spacing=\"10px\" paddingX=\"6px\">\r\n        <Icon\r\n          as={props.isLiked ? MdFavorite : MdFavoriteBorder}\r\n          h=\"30px\"\r\n          w=\"30px\"\r\n          className={`action-icon ${\r\n            size === \"small\" ? \"action-icon-small\" : \"\"\r\n          }`}\r\n          onMouseDown={likeButtonHandler}\r\n          color=\"heart.200\"\r\n        />\r\n        <Icon\r\n          as={props.commentVisibility ? MdModeComment : MdComment}\r\n          h=\"30px\"\r\n          w=\"30px\"\r\n          className=\"action-icon\"\r\n          onClick={props.onCommentButtonClick}\r\n          color=\"purple.500\"\r\n        />\r\n      </HStack>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default PostFooter;\r\n","import { Box, Text } from \"@chakra-ui/react\";\r\nimport { AiFillCloseCircle } from \"react-icons/ai\";\r\nimport { Avatar } from \"@chakra-ui/react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { commentDeleteActionHandler } from \"../../store/post-actions\";\r\n\r\nimport React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Comment(props) {\r\n  const dispatch = useDispatch();\r\n\r\n  const [deleteCommentProccessActive, setDeleteCommentProccessActive] =\r\n    useState(false);\r\n\r\n  const {\r\n    profileImage: userProfileImage,\r\n    username,\r\n    _id: userId,\r\n  } = props.commentData.userId;\r\n\r\n  const { _id: commentId, commentText, owner } = props.commentData;\r\n\r\n  const commentDeleteHandler = () => {\r\n    setDeleteCommentProccessActive(true);\r\n    dispatch(commentDeleteActionHandler(commentId, props.postId))\r\n      .then(() => {\r\n        props.onCommentDelete(commentId);\r\n      })\r\n      .catch(() => {\r\n        setDeleteCommentProccessActive(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      padding=\"2px\"\r\n      backgroundColor=\"white\"\r\n      marginBottom=\"2px\"\r\n      d=\"flex\"\r\n      mt=\"2px\"\r\n      opacity={deleteCommentProccessActive ? 0.5 : 1}\r\n    >\r\n      <Box padding=\"2px\" flexBasis=\"1\">\r\n        <Link to={`/profile/${username}`}>\r\n          <Avatar\r\n            height=\"16px\"\r\n            width=\"16px\"\r\n            name={username}\r\n            src={userProfileImage}\r\n            mr=\"4px\"\r\n          />\r\n        </Link>\r\n      </Box>\r\n      <Box flexGrow=\"10\" display=\"flex\">\r\n        <Link to={`/profile/${username}`}>\r\n          <Box\r\n            fontWeight=\"semibold\"\r\n            fontSize={{\r\n              base: \"10px\",\r\n              sm: \"10px\",\r\n              md: \"12px\",\r\n            }}\r\n            padding=\"2px\"\r\n            width=\"auto\"\r\n          >\r\n            {username}\r\n          </Box>\r\n        </Link>\r\n\r\n        <Box\r\n          fontSize={{\r\n            base: \"10px\",\r\n            sm: \"10px\",\r\n            md: \"12px\",\r\n          }}\r\n          padding=\"2px\"\r\n          maxWidth={{\r\n            base: \"200px\",\r\n            md: \"200px\",\r\n            lg: \"400px\",\r\n          }}\r\n          textOverflow=\"ellipsis\"\r\n        >\r\n          {commentText}\r\n        </Box>\r\n      </Box>\r\n\r\n      {owner && (\r\n        <Box onClick={commentDeleteHandler}>\r\n          <Text>\r\n            <AiFillCloseCircle className=\"crossDeleteIcon\" />\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default React.memo(Comment);\r\n","import { React, useEffect, useState } from \"react\";\r\n\r\nimport { Box, Center, Spinner } from \"@chakra-ui/react\";\r\nimport routeInstance from \"../../routes.instance\";\r\nimport Comment from \"./Comment\";\r\n\r\nfunction Comments(props) {\r\n  const [comments, setComments] = useState();\r\n  const [isLoading, setIsLoading] = useState();\r\n\r\n  useEffect(() => {\r\n    try {\r\n      const loadComments = async () => {\r\n        setIsLoading(true);\r\n        const response = await routeInstance({\r\n          url: `/api/comments/${props.postId}/all`,\r\n          method: \"get\",\r\n        });\r\n\r\n        const data = response.data;\r\n        setComments(data);\r\n        setIsLoading(false);\r\n      };\r\n\r\n      loadComments();\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  }, []);\r\n\r\n  const commentRemoveHandler = (commentId) => {\r\n    const commentsTemp = [...comments];\r\n    const index = commentsTemp.findIndex(\r\n      (comment) => comment._id === commentId\r\n    );\r\n    commentsTemp.splice(index, 1);\r\n    setComments(commentsTemp);\r\n    props.onLatestCommentDelete(commentId);\r\n  };\r\n\r\n  let commentList = [];\r\n  if (comments && comments !== []) {\r\n    commentList = comments.map((comment) => (\r\n      <Comment\r\n        commentData={comment}\r\n        key={comment._id}\r\n        postId={props.postId}\r\n        onCommentDelete={commentRemoveHandler}\r\n      />\r\n    ));\r\n  }\r\n  return (\r\n    <Box\r\n      borderBottom=\"1px solid #ccc\"\r\n      borderTop=\"1px solid #ccc\"\r\n      mx={{ base: \"2px\", md: \"8px\" }}\r\n      py=\"0px\"\r\n      rounded=\"lg\"\r\n    >\r\n      {isLoading ? (\r\n        <Center>\r\n          <Spinner size=\"md\" />\r\n        </Center>\r\n      ) : (\r\n        commentList\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Comments;\r\n","import { Box, Avatar, Input, Button } from \"@chakra-ui/react\";\r\n\r\nimport React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport routeInstance from \"../../routes.instance\";\r\n\r\nfunction CommentInput(props) {\r\n  const userProfileImage = useSelector((state) => state.user.userProfileImage);\r\n  const userFullname = useSelector((state) => state.user.userFullname);\r\n\r\n  const { userName: username } = useSelector((state) => state.user);\r\n\r\n  const [text, setText] = useState(\"\");\r\n  let isDisabled = true;\r\n  if (text === \"\") {\r\n    isDisabled = true;\r\n  } else {\r\n    isDisabled = false;\r\n  }\r\n\r\n  const commentPostHandler = async () => {\r\n    try {\r\n      const response = await routeInstance({\r\n        method: \"post\",\r\n        url: `/api/comments/${props.postId}/new`,\r\n        data: {\r\n          commentText: text,\r\n        },\r\n      });\r\n\r\n      const data = await response.data;\r\n\r\n      props.appendComment(data);\r\n\r\n      setText(\"\");\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box width=\"100%\" py=\"12px\" mx=\"2px\" d=\"flex\" borderTop=\"1px solid #ccc\">\r\n      <Box p=\"5px\" display=\"flex\" alignItems=\"center\">\r\n        <Avatar size=\"xs\" name={userFullname} src={userProfileImage} mr=\"4px\" />\r\n      </Box>\r\n      <Box\r\n        p=\"8px\"\r\n        fontWeight=\"bold\"\r\n        fontSize={{\r\n          base: \"10px\",\r\n          sm: \"10px\",\r\n          md: \"12px\",\r\n        }}\r\n        width=\"auto\"\r\n        flexShrink=\"1\"\r\n        d=\"flex\"\r\n        justifyContent=\"center\"\r\n        alignContent=\"center\"\r\n        display={{ base: \"none\", lg: \"flex\" }}\r\n        overflow=\"hidden\"\r\n        maxWidth=\"100px\"\r\n      >\r\n        {username}\r\n      </Box>\r\n      <Box padding=\"6px\" w=\"100%\">\r\n        <Input\r\n          variant=\"flushed\"\r\n          placeholder=\"Add a comment\"\r\n          fontSize={{\r\n            base: \"10px\",\r\n            sm: \"10px\",\r\n            md: \"12px\",\r\n          }}\r\n          size=\"sm\"\r\n          onChange={(e) => setText(e.target.value)}\r\n          value={text}\r\n        />\r\n      </Box>\r\n      <Box>\r\n        <Button\r\n          color=\"blue\"\r\n          textAlign=\"center\"\r\n          cursor=\"pointer\"\r\n          p=\"8px\"\r\n          fontSize=\"14px\"\r\n          disabled={isDisabled}\r\n          onClick={commentPostHandler}\r\n        >\r\n          Post\r\n        </Button>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default CommentInput;\r\n","import { React } from \"react\";\r\nimport { Box, Text } from \"@chakra-ui/react\";\r\nimport Comment from \"./Comment\";\r\nimport _ from \"underscore\";\r\nfunction LatestComments(props) {\r\n  let latestComments = props.latestComments;\r\n  let commentList = [];\r\n  if (latestComments !== undefined) {\r\n    latestComments = _.first(latestComments, 4);\r\n\r\n    commentList = latestComments.reverse().map((comment) => {\r\n      return (\r\n        <Comment\r\n          postId={props.postId}\r\n          commentData={comment}\r\n          key={comment._id}\r\n          onCommentDelete={props.onLatestCommentDelete}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Box mx=\"8px\" py=\"0px\">\r\n      {latestComments && latestComments.length !== 0 ? (\r\n        <Text fontSize=\"xs\" mb=\"10px\" fontWeight=\"semibold\">\r\n          Recent comments\r\n        </Text>\r\n      ) : null}\r\n\r\n      {latestComments && <Box>{commentList}</Box>}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default LatestComments;\r\n","import {\r\n  Menu,\r\n  MenuButton,\r\n  MenuList,\r\n  MenuItem,\r\n  Icon,\r\n  Button,\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogContent,\r\n  AlertDialogOverlay,\r\n} from \"@chakra-ui/react\";\r\nimport { AiOutlineEllipsis } from \"react-icons/ai\";\r\n\r\nimport React, { Fragment, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { postDeleteActionHandler } from \"../../store/post-actions\";\r\n\r\nexport default function PostContextMenu({ postId, postDeletePossible }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const onClose = () => setIsOpen(false);\r\n  const cancelRef = React.useRef();\r\n\r\n  const postDeleteHandler = () => {\r\n    dispatch(postDeleteActionHandler(postId))\r\n      .then(() => {\r\n        setIsOpen(false);\r\n      })\r\n      .catch(() => {\r\n        setIsOpen(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <>\r\n        <AlertDialog\r\n          isOpen={isOpen}\r\n          leastDestructiveRef={cancelRef}\r\n          onClose={onClose}\r\n        >\r\n          <AlertDialogOverlay>\r\n            <AlertDialogContent>\r\n              <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n                Delete Post\r\n              </AlertDialogHeader>\r\n\r\n              <AlertDialogBody>\r\n                Are you sure? You can't undo this action afterwards.\r\n              </AlertDialogBody>\r\n\r\n              <AlertDialogFooter>\r\n                <Button ref={cancelRef} onClick={onClose}>\r\n                  Cancel\r\n                </Button>\r\n                <Button colorScheme=\"red\" onClick={postDeleteHandler} ml={3}>\r\n                  Delete\r\n                </Button>\r\n              </AlertDialogFooter>\r\n            </AlertDialogContent>\r\n          </AlertDialogOverlay>\r\n        </AlertDialog>\r\n      </>\r\n\r\n      <Menu>\r\n        <MenuButton>\r\n          <Icon\r\n            as={AiOutlineEllipsis}\r\n            fontSize=\"20px\"\r\n            className=\"action-icon\"\r\n          />\r\n        </MenuButton>\r\n        <MenuList>\r\n          {/* MenuItems are not rendered unless Menu is open */}\r\n          {postDeletePossible && (\r\n            <MenuItem onClick={() => setIsOpen(true)}>Delete Post</MenuItem>\r\n          )}\r\n          {/* <MenuItem>Open Post</MenuItem> */}\r\n          <MenuItem>Report</MenuItem>\r\n        </MenuList>\r\n      </Menu>\r\n    </Fragment>\r\n  );\r\n}\r\n","import { Box, Avatar, Text } from \"@chakra-ui/react\";\r\n\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport PostContextMenu from \"./PostContextMenu\";\r\n\r\nfunction PostHeader(props) {\r\n  const { username, userProfileSrc } = props;\r\n\r\n  return (\r\n    <Box\r\n      display=\"flex\"\r\n      justifyContent=\"space-between\"\r\n      px=\"6px\"\r\n      py={{ base: \"4px\", md: \"8px\" }}\r\n    >\r\n      <Box display=\"flex\" alignItems=\"center\" mb=\"12px\">\r\n        <Avatar\r\n          width=\"28px\"\r\n          height=\"28px\"\r\n          size=\"sm\"\r\n          mr=\"16px\"\r\n          className=\"action-icon\"\r\n          name={username}\r\n          src={userProfileSrc}\r\n        />\r\n        <Link to={`/profile/${username}`}>\r\n          <Text fontSize=\"14px\" fontWeight=\"500\" className=\"action-icon\">\r\n            {username}\r\n          </Text>\r\n        </Link>\r\n      </Box>\r\n      <Box className=\"action-icon\">\r\n        <PostContextMenu\r\n          postId={props.postId}\r\n          postDeletePossible={props.postDeletePossible}\r\n        />\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default PostHeader;\r\n","import React from \"react\";\r\nimport { Box, Skeleton, SkeletonCircle, SkeletonText } from \"@chakra-ui/react\";\r\n\r\nfunction PostSkeleton() {\r\n  return (\r\n    <Box\r\n      padding=\"6\"\r\n      boxShadow=\"lg\"\r\n      bg=\"white\"\r\n      width=\"600px\"\r\n      marginBottom=\"40px\"\r\n      height=\"600px\"\r\n      mx=\"auto\"\r\n    >\r\n      <Box d=\"flex\">\r\n        <SkeletonCircle size=\"10\" />\r\n        <SkeletonText mt=\"4\" ml=\"2\" width=\"100px\" noOfLines={1} spacing=\"4\" />\r\n      </Box>\r\n      <SkeletonText mt=\"4\" ml=\"2\" noOfLines={1} spacing=\"4\" />\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default PostSkeleton;\r\n","import React from \"react\";\r\n\r\nfunction PostImage({ imageSrc }) {\r\n  return <img src={imageSrc} className=\"timelinePostImage\" />;\r\n}\r\n\r\nexport default React.memo(PostImage);\r\n","import routeInstance from \"../routes.instance\";\r\nimport setToastData from \"../utils/showToast\";\r\n\r\nexport const getLatestComments = async (\r\n  dispatch,\r\n  postId,\r\n  setLatestComments\r\n) => {\r\n  try {\r\n    const response = await routeInstance({\r\n      url: `/api/comments/${postId}/latest`,\r\n      method: \"get\",\r\n    });\r\n\r\n    if (response) {\r\n      if (response.status === 200) {\r\n        const data = await response.data;\r\n        setLatestComments(data);\r\n      } else {\r\n        setToastData(dispatch);\r\n      }\r\n    }\r\n  } catch (err) {\r\n    console.log(err.message);\r\n  }\r\n};\r\n","import { Box, useStyleConfig } from \"@chakra-ui/react\";\r\n\r\nfunction PostBox(props) {\r\n  const styles = useStyleConfig(\"PostBox\");\r\n\r\n  // Pass the computed styles into the `__css` prop\r\n  return <Box __css={styles}>{props.children}</Box>;\r\n}\r\n\r\nexport default PostBox;\r\n","import React, { useCallback } from \"react\";\r\nimport { Box } from \"@chakra-ui/react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nimport { likeDislikePostHandler } from \"../../store/post-actions\";\r\nimport PostFooter from \"./PostFooter\";\r\nimport Comments from \"../Comment/Comments\";\r\nimport CommentInput from \"../Comment/CommentInput\";\r\nimport LatestComments from \"../Comment/LatestComments\";\r\nimport PostHeader from \"./PostHeader\";\r\nimport PostSkeleton from \"./PostSkeleton\";\r\n\r\nimport PostImage from \"./PostImage\";\r\nimport { getLatestComments } from \"../../store/comment-actions\";\r\nimport PostBox from \"./PostBox\";\r\n\r\nconst Post = ({ postData }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [isPostDataLoading, setIsPostDataLoading] = useState(true);\r\n  const [isLiked, setIsLiked] = useState(undefined);\r\n\r\n  const [likesCount, setLikesCount] = useState(postData.likes.length);\r\n  const [commentsVisibility, setCommentsVisibility] = useState(false);\r\n  const [latestComments, setLatestComments] = useState(undefined);\r\n  const userId = useSelector((state) => state.user.userId);\r\n\r\n  const { _id: postId, postDeletePossible } = postData;\r\n  const { username, profileImage: userProfileSrc } = postData.userId;\r\n  console.log(userProfileSrc);\r\n  useEffect(() => {\r\n    if (isLiked === undefined) {\r\n      let likedConst = postData.likes.includes(userId);\r\n      if (postData) {\r\n        setIsLiked(likedConst);\r\n      }\r\n      setIsPostDataLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchLatestComments = async () => {\r\n      await setIsPostDataLoading(true);\r\n      await getLatestComments(dispatch, postId, setLatestComments);\r\n      await setIsPostDataLoading(false);\r\n    };\r\n\r\n    fetchLatestComments();\r\n  }, []);\r\n\r\n  const postLikeActivityHandler = () => {\r\n    async function likeDislikePost() {\r\n      dispatch(likeDislikePostHandler(postId));\r\n      setIsLiked((prevState) => !prevState);\r\n\r\n      if (isLiked) {\r\n        setLikesCount((prevCount) => (prevCount -= 1));\r\n      } else {\r\n        setLikesCount((prevCount) => (prevCount += 1));\r\n      }\r\n    }\r\n\r\n    likeDislikePost();\r\n  };\r\n\r\n  const commentsVisibilityHandler = () => {\r\n    setCommentsVisibility((prevState) => !prevState);\r\n  };\r\n\r\n  const newCommentAppendHandler = useCallback((newCommentData) => {\r\n    const latestCommentsTemp = [...latestComments];\r\n    latestCommentsTemp.unshift(newCommentData);\r\n    setLatestComments(latestCommentsTemp);\r\n  });\r\n\r\n  const latestCommentRemoveHandler = (commentId) => {\r\n    const latestCommentsTemp = [...latestComments];\r\n    const index = latestCommentsTemp.findIndex(\r\n      (comment) => comment._id === commentId\r\n    );\r\n    if (index === -1) {\r\n      return;\r\n    }\r\n\r\n    latestCommentsTemp.splice(index, 1);\r\n    setLatestComments(latestCommentsTemp);\r\n  };\r\n\r\n  const PostContent = () => {\r\n    return (\r\n      <>\r\n        <Box>\r\n          <PostHeader\r\n            username={username}\r\n            userProfileSrc={userProfileSrc}\r\n            postId={postId}\r\n            postDeletePossible={postDeletePossible}\r\n          />\r\n\r\n          <Box fontSize=\"14px\" px=\"6px\" py=\"4px\">\r\n            {postData.desc}\r\n          </Box>\r\n\r\n          <Box overflow=\"hidden\">\r\n            <Box d=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n              <PostImage imageSrc={postData.postImage} />\r\n            </Box>\r\n          </Box>\r\n\r\n          <PostFooter\r\n            isLiked={isLiked}\r\n            setIsLiked={setIsLiked}\r\n            onLikeButtonClick={postLikeActivityHandler}\r\n            commentsVisibility={commentsVisibility}\r\n            onCommentButtonClick={commentsVisibilityHandler}\r\n            // isTouched={isTouched}\r\n          />\r\n\r\n          {commentsVisibility && postId && (\r\n            <Comments\r\n              postId={postId}\r\n              latestComments={latestComments}\r\n              onLatestCommentDelete={latestCommentRemoveHandler}\r\n            />\r\n          )}\r\n          {!commentsVisibility && postId && (\r\n            <LatestComments\r\n              postId={postId}\r\n              latestComments={latestComments}\r\n              onLatestCommentDelete={latestCommentRemoveHandler}\r\n            />\r\n          )}\r\n        </Box>\r\n        <Box>\r\n          <CommentInput\r\n            postId={postId}\r\n            appendComment={newCommentAppendHandler}\r\n          />\r\n        </Box>\r\n        <Box marginY=\"8px\" fontSize=\"13px\" mx=\"10px\">\r\n          {likesCount > 0 ? `${likesCount} likes` : \"No likes\"}\r\n        </Box>\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <PostBox className=\"postDataContainer\">\r\n      {isPostDataLoading ? <PostSkeleton /> : <PostContent />}\r\n    </PostBox>\r\n  );\r\n};\r\n\r\nexport default React.memo(Post);\r\n","import { feedSliceActions } from \"./feedSlice\";\r\nimport routeInstance from \"../routes.instance\";\r\nimport setToastData from \"../utils/showToast\";\r\nimport { userSliceActions } from \"./userSlice\";\r\n\r\nexport const loadTimelinePosts = (page) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await routeInstance({\r\n        url: `/api/posts/timeline?page=${page}&count=3`,\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n\r\n      const resData = await response.data;\r\n      const data = resData.data;\r\n\r\n      if (data.length === 0) {\r\n        dispatch(feedSliceActions.setMorePostsBoolean(false));\r\n      } else dispatch(feedSliceActions.setTimelinePosts(data));\r\n    } catch (error) {\r\n      dispatch(feedSliceActions.setMorePostsBoolean(false));\r\n      setToastData(dispatch);\r\n    }\r\n  };\r\n};\r\n","import Post from \"../../Post/Post\";\r\nimport { loadTimelinePosts } from \"../../../store/feed-actions\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\n\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\n\r\nimport PostSkeleton from \"../../Post/PostSkeleton\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { feedSliceActions } from \"../../../store/feedSlice\";\r\nimport NoPostsFound from \"../../Profile/NoPostsFound\";\r\n\r\nconst Feed = () => {\r\n  const dispatch = useDispatch();\r\n  const { timelinePosts, morePosts, page } = useSelector((state) => state.feed);\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    async function loadPosts() {\r\n      await setLoading(true);\r\n      console.log(\"loadingPosts\");\r\n      await dispatch(loadTimelinePosts(page));\r\n      setLoading(false);\r\n    }\r\n\r\n    if (morePosts === true) {\r\n      loadPosts();\r\n    }\r\n    return () => {\r\n      dispatch(feedSliceActions.setMorePostsBoolean(false));\r\n    };\r\n  }, [page, dispatch, morePosts]);\r\n\r\n  const pageIncreaseHandler = useCallback(() => {\r\n    dispatch(feedSliceActions.incrementPage());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <Box\r\n      flex=\"5\"\r\n      marginX={{ base: \"0px\" }}\r\n      bgColor=\"feedBackground.200\"\r\n      minHeight=\"90vh\"\r\n    >\r\n      <InfiniteScroll\r\n        dataLength={timelinePosts.length}\r\n        next={pageIncreaseHandler}\r\n        hasMore={morePosts}\r\n        loader={<PostSkeleton />}\r\n        endMessage={\r\n          timelinePosts.length > 0 ? (\r\n            <Box\r\n              padding=\"12px\"\r\n              style={{ textAlign: \"center\" }}\r\n              backgroundColor=\"navBackground.200\"\r\n            >\r\n              <Text fontSize=\"lg\">You are all caught up</Text>\r\n            </Box>\r\n          ) : (\r\n            <NoPostsFound />\r\n          )\r\n        }\r\n      >\r\n        {timelinePosts.map((post, index) => (\r\n          <Post key={index + post._id} postData={post} />\r\n        ))}\r\n      </InfiniteScroll>\r\n\r\n      {loading && (\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n          <Spinner\r\n            thickness=\"2px\"\r\n            speed=\"0.65s\"\r\n            emptyColor=\"gray.200\"\r\n            color=\"blue.500\"\r\n            size=\"xl\"\r\n          />\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Feed;\r\n","import { Box } from \"@chakra-ui/layout\";\r\n\r\nconst Sidebar = () => {\r\n  return (\r\n    <Box\r\n      pos=\"sticky\"\r\n      display={{ base: \"none\", lg: \"block\" }}\r\n      top=\"0\"\r\n      left=\"0\"\r\n      height=\"100vh\"\r\n      width={{ sm: \"10px\", lg: \"250px\" }}\r\n      bgColor=\"feedBackground.200\"\r\n    ></Box>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Avatar, Box, Button } from \"@chakra-ui/react\";\r\nimport { UISliceActions } from \"../../../store/UISlice\";\r\n\r\nconst UserDetailsCard = ({ userData }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const userProfileImage = useSelector((state) => state.user.userProfileImage);\r\n\r\n  if (!userData) {\r\n    return <p>Loading</p>;\r\n  } else\r\n    return (\r\n      <Box\r\n        width=\"40vh\"\r\n        background=\"whiteAlpha.300\"\r\n        mt=\"10px\"\r\n        padding=\"10px\"\r\n        rounded=\"lg\"\r\n        border=\"1px solid #ccc\"\r\n        mb=\"24px\"\r\n        d=\"flex\"\r\n        bgColor=\"white\"\r\n      >\r\n        <Box d=\"flex\" flex=\"8\" alignItems=\"center\" p=\"10px\">\r\n          <Avatar size=\"md\" name={userData.username} src={userProfileImage} />\r\n\r\n          <Box height=\"fit-content\" ml=\"14px\">\r\n            {userData.userName}\r\n          </Box>\r\n        </Box>\r\n\r\n        <Box d=\"flex\" flex=\"4\" justifyContent=\"center\" alignItems=\"center\">\r\n          <Button\r\n            d=\"flex\"\r\n            alignItems=\"center\"\r\n            cursor=\"pointer\"\r\n            height=\"fit-content\"\r\n            padding=\"8px 10px\"\r\n            fontSize=\"12px\"\r\n            onClick={() =>\r\n              dispatch(\r\n                UISliceActions.setLogoutAlertVisibility({\r\n                  isLogoutAlertVisible: true,\r\n                })\r\n              )\r\n            }\r\n            outline=\"1px solid #ccc\"\r\n          >\r\n            Switch\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n    );\r\n};\r\n\r\nexport default UserDetailsCard;\r\n","import { Box, Text } from \"@chakra-ui/layout\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport UserDetailsCard from \"./UserDetailsCard\";\r\nimport SuggestedUserList from \"./SuggestedUserList\";\r\nimport { UISliceActions } from \"../../../store/UISlice\";\r\n\r\nimport \"./RightBar.css\";\r\n\r\nconst RightBar = () => {\r\n  const dispatch = useDispatch();\r\n  const userData = useSelector((state) => state.user);\r\n  const togglePostCreatorModalVisibility = () => {\r\n    dispatch(UISliceActions.toggleModalVisibility());\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      flex=\"5\"\r\n      height=\"94vh\"\r\n      position=\"sticky\"\r\n      top=\"50px\"\r\n      d={{ base: \"none\", lg: \"flex\" }}\r\n      flexDirection=\"column\"\r\n      paddingLeft=\"5vw\"\r\n      className=\"RightBarWrapper\"\r\n      bgColor=\"feedBackground.200\"\r\n      overflow=\"none\"\r\n    >\r\n      <UserDetailsCard userData={userData} />\r\n      <Box\r\n        width=\"40vh\"\r\n        className=\"rightBarComponents\"\r\n        flex=\"4\"\r\n        rounded=\"lg\"\r\n        border=\"1px solid #ccc\"\r\n        p=\"14px\"\r\n        mb=\"24px\"\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        bgColor=\"white\"\r\n        boxShadow=\"rgba(0, 0, 0, 0.15) 0px 2px 8px;\"\r\n      >\r\n        <Text textAlign=\"center\" fontSize=\"20px\" mb=\"16px\" p=\"5px\">\r\n          Create a new post\r\n        </Text>\r\n        <Box\r\n          display=\"flex\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n          flexGrow=\"1\"\r\n        >\r\n          <Button\r\n            width=\"100%\"\r\n            backgroundColor=\"blue\"\r\n            color=\"white\"\r\n            boxShadow=\"0px 2px 5px gray\"\r\n            onClick={togglePostCreatorModalVisibility}\r\n            _hover={{\r\n              bgGradient: \"linear(to-r, #7928CA , #FF0080 )\",\r\n            }}\r\n            _active={{\r\n              pos: \"relative\",\r\n              top: \"3px\",\r\n              bgGradient: \"linear(to-r, #7928CA , #FF0080)\",\r\n            }}\r\n          >\r\n            Create A Post\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n\r\n      <Box\r\n        borderWidth=\"2px\"\r\n        padding=\"14px\"\r\n        rounded=\"lg\"\r\n        border=\"1px solid #ccc\"\r\n        mb=\"24px\"\r\n        width=\"40vh\"\r\n        className=\"rightBarComponents\"\r\n        flex=\"6\"\r\n        bgColor=\"white\"\r\n      >\r\n        <Text textAlign=\"center\" fontSize=\"20px\" mb=\"16px\" p=\"5px\">\r\n          People you may know\r\n        </Text>\r\n\r\n        <SuggestedUserList count={4} />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default RightBar;\r\n","import { Box } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\n\r\nimport Feed from \"../components/Feed/Timeline/Feed\";\r\nimport Sidebar from \"../components/Feed/Sidebar/Sidebar\";\r\nimport RightBar from \"../components/Feed/RightBar/RightBar\";\r\n\r\nconst FeedPage = () => {\r\n  console.log(\"feed page rerendered\");\r\n  return (\r\n    <Box d=\"flex\">\r\n      <Sidebar />\r\n      <Feed />\r\n      <RightBar />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default React.memo(FeedPage);\r\n"],"sourceRoot":""}