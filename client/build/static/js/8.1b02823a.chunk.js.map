{"version":3,"sources":["store/post-actions.js","assets/Search-amico.svg","components/Profile/NoPostsFound.js","components/Post/PostFooter.js","components/Comment/Comment.js","components/Comment/Comments.js","components/Comment/CommentInput.js","components/Comment/LatestComments.js","components/Post/PostContextMenu.js","components/Post/PostHeader.js","components/Post/PostSkeleton.js","components/Post/PostImage.js","store/comment-actions.js","components/Post/PostBox.js","components/Post/Post.js","components/Feed/Timeline/Feed.js","hooks/useFetchPosts.js","components/Feed/Sidebar/Sidebar.js","components/Feed/RightBar/UserDetailsCard.js","components/Feed/RightBar/RightBar.js","pages/FeedPage.js"],"names":["createNewPost","formData","dispatch","setProcess","setLoadingProcess","routeInstance","post","then","response","data","resData","setResultProcess","UISliceActions","toggleModalVisibility","feedSliceActions","addNewPost","catch","error","console","log","likeDislikePostHandler","postId","url","method","headers","postDeleteActionHandler","Promise","resolve","reject","status","deletePost","commentDeleteActionHandler","commentId","setToastData","NoPostsFound","textAlign","paddingX","paddingY","maxWidth","marginX","src","NoPostsImage","fontSize","PostFooter","props","useState","isChanged","setIsChanged","size","setSize","useEffect","marginY","spacing","as","isLiked","MdFavorite","MdFavoriteBorder","h","w","className","onMouseDown","onLikeButtonClick","color","commentVisibility","MdModeComment","MdComment","onClick","onCommentButtonClick","Comment","useDispatch","deleteCommentProccessActive","setDeleteCommentProccessActive","commentData","userId","userProfileImage","profileImage","username","_id","commentText","owner","padding","backgroundColor","marginBottom","d","mt","opacity","flexBasis","to","height","width","name","mr","flexGrow","display","fontWeight","base","sm","md","lg","textOverflow","onCommentDelete","React","memo","Comments","comments","setComments","isLoading","setIsLoading","loadComments","a","err","message","commentRemoveHandler","commentsTemp","index","findIndex","comment","splice","onLatestCommentDelete","commentList","map","borderBottom","borderTop","mx","py","rounded","CommentInput","useSelector","state","user","userFullname","userName","text","setText","isDisabled","commentPostHandler","appendComment","p","alignItems","flexShrink","justifyContent","alignContent","overflow","variant","placeholder","onChange","e","target","value","cursor","disabled","LatestComments","latestComments","undefined","_","first","reverse","length","mb","PostContextMenu","postDeletePossible","isOpen","setIsOpen","onClose","cancelRef","useRef","leastDestructiveRef","ref","colorScheme","ml","AiOutlineEllipsis","PostHeader","userProfileSrc","px","PostSkeleton","boxShadow","bg","noOfLines","PostImage","imageSrc","getLatestComments","setLatestComments","PostBox","styles","useStyleConfig","__css","children","Post","postData","isPostDataLoading","setIsPostDataLoading","setIsLiked","likes","likesCount","setLikesCount","commentsVisibility","setCommentsVisibility","likedConst","includes","fetchLatestComments","postLikeActivityHandler","prevState","prevCount","likeDislikePost","commentsVisibilityHandler","newCommentAppendHandler","useCallback","newCommentData","latestCommentsTemp","unshift","latestCommentRemoveHandler","PostContent","forwardRef","desc","postImage","Feed","pageNum","setPageNum","results","setResults","isError","setIsError","setError","hasNextPage","setHasNextPage","controller","AbortController","signal","getPostsPage","get","prev","Boolean","aborted","abort","useFetchPosts","intObserver","lastPostRef","current","disconnect","IntersectionObserver","posts","isIntersecting","observe","flex","bgColor","minHeight","thickness","speed","emptyColor","style","Sidebar","pos","top","left","UserDetailsCard","userData","background","border","setLogoutAlertVisibility","isLogoutAlertVisible","outline","RightBar","position","flexDirection","paddingLeft","_hover","bgGradient","_active","borderWidth","SuggestedUserList","count","FeedPage"],"mappings":"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","file":"static/js/8.1b02823a.chunk.js","sourcesContent":["import routeInstance from \"../api/routes.instance\";\r\nimport setToastData from \"../utils/showToast\";\r\nimport { feedSliceActions } from \"./feedSlice\";\r\n\r\nimport setProcess from \"../utils/setProcess\";\r\nimport { UISliceActions } from \"./UISlice\";\r\n\r\nexport const createNewPost = (formData) => async (dispatch) => {\r\n  setProcess.setLoadingProcess(dispatch, \"Uploading your post\");\r\n  routeInstance\r\n    .post(\"/api/posts/newpost\", formData)\r\n    .then(async (response) => {\r\n      const resData = await response.data;\r\n\r\n      setProcess.setResultProcess(dispatch, true, \"Post Uploaded\");\r\n      dispatch(UISliceActions.toggleModalVisibility());\r\n      dispatch(feedSliceActions.addNewPost(resData.data));\r\n    })\r\n    .catch((error) => {\r\n      console.log(error);\r\n\r\n      setProcess.setResultProcess(dispatch, false, \"Upload Error\");\r\n    });\r\n};\r\n\r\nexport const checkLikeStatus = async (postId) => {\r\n  try {\r\n    const accessToken = localStorage.getItem(\"accessToken\");\r\n\r\n    const response = await routeInstance(`/api/posts/${postId}/likestatus`, {\r\n      headers: { Authorization: \"Bearer \" + accessToken },\r\n    });\r\n\r\n    const data = await response.data;\r\n\r\n    if (data.likeState === true) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const likeDislikePostHandler = (postId) => async (dispatch) => {\r\n  try {\r\n    const response = await routeInstance({\r\n      url: `/api/posts/${postId}/like`,\r\n      method: \"POST\",\r\n      headers: {},\r\n    });\r\n\r\n    console.log(response);\r\n    const data = await response.data;\r\n\r\n    console.log(data);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const postDeleteActionHandler = (postId) => {\r\n  return (dispatch) => {\r\n    return new Promise(async (resolve, reject) => {\r\n      setProcess.setLoadingProcess(dispatch, \"Deleting your post\");\r\n      try {\r\n        const response = await routeInstance({\r\n          url: `/api/posts/${postId}`,\r\n          method: \"DELETE\",\r\n          headers: {},\r\n        });\r\n\r\n        if (response.status === 200) {\r\n          dispatch(feedSliceActions.deletePost(postId));\r\n          setProcess.setResultProcess(dispatch, true, \"Post Deleted\");\r\n          return resolve(\"Post deleted\");\r\n        }\r\n      } catch (error) {\r\n        setProcess.setResultProcess(dispatch, false, \"Operation failed\");\r\n      }\r\n    });\r\n  };\r\n};\r\n\r\nexport const commentDeleteActionHandler = (commentId, postId) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await routeInstance({\r\n        method: \"delete\",\r\n        url: `/api/comments/${commentId}`,\r\n        headers: {},\r\n        data: {\r\n          postId,\r\n        },\r\n      });\r\n      const resData = await response.data;\r\n      setToastData(dispatch, { ...resData });\r\n    } catch (err) {\r\n      setToastData(dispatch);\r\n    }\r\n  };\r\n};\r\n","export default __webpack_public_path__ + \"static/media/Search-amico.72117529.svg\";","import React from \"react\";\r\nimport { Box, Image, Text } from \"@chakra-ui/react\";\r\nimport NoPostsImage from \"../../assets/Search-amico.svg\";\r\n\r\nfunction NoPostsFound() {\r\n  return (\r\n    <Box\r\n      textAlign=\"center\"\r\n      paddingX=\"20px\"\r\n      paddingY=\"28px\"\r\n      maxWidth=\"400px\"\r\n      marginX=\"auto\"\r\n    >\r\n      <Image src={NoPostsImage} />\r\n      <Text fontSize=\"xl\" textAlign=\"center\">\r\n        No posts found\r\n      </Text>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default NoPostsFound;\r\n","import { useEffect, useState } from \"react\";\r\nimport { Box, Icon, HStack } from \"@chakra-ui/react\";\r\nimport { MdFavoriteBorder } from \"react-icons/md\";\r\nimport { MdFavorite } from \"react-icons/md\";\r\nimport { MdComment } from \"react-icons/md\";\r\nimport { MdModeComment } from \"react-icons/md\";\r\n\r\nimport React from \"react\";\r\n\r\nfunction PostFooter(props) {\r\n  const [isChanged, setIsChanged] = useState(false);\r\n  const [size, setSize] = useState(\"large\");\r\n  useEffect(() => {\r\n    if (isChanged) {\r\n      setSize(\"small\");\r\n    }\r\n\r\n    return () => {\r\n      setIsChanged(false);\r\n    };\r\n  }, [isChanged]);\r\n\r\n  const likeButtonHandler = () => {\r\n    setIsChanged(true);\r\n    props.onLikeButtonClick();\r\n  };\r\n\r\n  return (\r\n    <Box marginY=\"10px\">\r\n      <HStack spacing=\"10px\" paddingX=\"6px\">\r\n        <Icon\r\n          as={props.isLiked ? MdFavorite : MdFavoriteBorder}\r\n          h=\"30px\"\r\n          w=\"30px\"\r\n          className={`action-icon ${\r\n            size === \"small\" ? \"action-icon-small\" : \"\"\r\n          }`}\r\n          onMouseDown={likeButtonHandler}\r\n          color=\"heart.200\"\r\n        />\r\n        <Icon\r\n          as={props.commentVisibility ? MdModeComment : MdComment}\r\n          h=\"30px\"\r\n          w=\"30px\"\r\n          className=\"action-icon\"\r\n          onClick={props.onCommentButtonClick}\r\n          color=\"purple.500\"\r\n        />\r\n      </HStack>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default PostFooter;\r\n","import { Box, Text } from \"@chakra-ui/react\";\r\nimport { AiFillCloseCircle } from \"react-icons/ai\";\r\nimport { Avatar } from \"@chakra-ui/react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { commentDeleteActionHandler } from \"../../store/post-actions\";\r\n\r\nimport React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Comment(props) {\r\n  const dispatch = useDispatch();\r\n\r\n  const [deleteCommentProccessActive, setDeleteCommentProccessActive] =\r\n    useState(false);\r\n\r\n  const {\r\n    profileImage: userProfileImage,\r\n    username,\r\n    _id: userId,\r\n  } = props.commentData.userId;\r\n\r\n  const { _id: commentId, commentText, owner } = props.commentData;\r\n\r\n  const commentDeleteHandler = () => {\r\n    setDeleteCommentProccessActive(true);\r\n    dispatch(commentDeleteActionHandler(commentId, props.postId))\r\n      .then(() => {\r\n        props.onCommentDelete(commentId);\r\n      })\r\n      .catch(() => {\r\n        setDeleteCommentProccessActive(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      padding=\"2px\"\r\n      backgroundColor=\"white\"\r\n      marginBottom=\"2px\"\r\n      d=\"flex\"\r\n      mt=\"2px\"\r\n      opacity={deleteCommentProccessActive ? 0.5 : 1}\r\n    >\r\n      <Box padding=\"2px\" flexBasis=\"1\">\r\n        <Link to={`/profile/${username}`}>\r\n          <Avatar\r\n            height=\"16px\"\r\n            width=\"16px\"\r\n            name={username}\r\n            src={userProfileImage}\r\n            mr=\"4px\"\r\n          />\r\n        </Link>\r\n      </Box>\r\n      <Box flexGrow=\"10\" display=\"flex\">\r\n        <Link to={`/profile/${username}`}>\r\n          <Box\r\n            fontWeight=\"semibold\"\r\n            fontSize={{\r\n              base: \"10px\",\r\n              sm: \"10px\",\r\n              md: \"12px\",\r\n            }}\r\n            padding=\"2px\"\r\n            width=\"auto\"\r\n          >\r\n            {username}\r\n          </Box>\r\n        </Link>\r\n\r\n        <Box\r\n          fontSize={{\r\n            base: \"10px\",\r\n            sm: \"10px\",\r\n            md: \"12px\",\r\n          }}\r\n          padding=\"2px\"\r\n          maxWidth={{\r\n            base: \"200px\",\r\n            md: \"200px\",\r\n            lg: \"400px\",\r\n          }}\r\n          textOverflow=\"ellipsis\"\r\n        >\r\n          {commentText}\r\n        </Box>\r\n      </Box>\r\n\r\n      {owner && (\r\n        <Box onClick={commentDeleteHandler}>\r\n          <Text>\r\n            <AiFillCloseCircle className=\"crossDeleteIcon\" />\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default React.memo(Comment);\r\n","import { React, useEffect, useState } from \"react\";\r\n\r\nimport { Box, Center, Spinner } from \"@chakra-ui/react\";\r\nimport routeInstance from \"../../api/routes.instance\";\r\nimport Comment from \"./Comment\";\r\n\r\nfunction Comments(props) {\r\n  const [comments, setComments] = useState();\r\n  const [isLoading, setIsLoading] = useState();\r\n\r\n  useEffect(() => {\r\n    try {\r\n      const loadComments = async () => {\r\n        setIsLoading(true);\r\n        const response = await routeInstance({\r\n          url: `/api/comments/${props.postId}/all`,\r\n          method: \"get\",\r\n        });\r\n\r\n        const data = response.data;\r\n        setComments(data);\r\n        setIsLoading(false);\r\n      };\r\n\r\n      loadComments();\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  }, []);\r\n\r\n  const commentRemoveHandler = (commentId) => {\r\n    const commentsTemp = [...comments];\r\n    const index = commentsTemp.findIndex(\r\n      (comment) => comment._id === commentId\r\n    );\r\n    commentsTemp.splice(index, 1);\r\n    setComments(commentsTemp);\r\n    props.onLatestCommentDelete(commentId);\r\n  };\r\n\r\n  let commentList = [];\r\n  if (comments && comments !== []) {\r\n    commentList = comments.map((comment) => (\r\n      <Comment\r\n        commentData={comment}\r\n        key={comment._id}\r\n        postId={props.postId}\r\n        onCommentDelete={commentRemoveHandler}\r\n      />\r\n    ));\r\n  }\r\n  return (\r\n    <Box\r\n      borderBottom=\"1px solid #ccc\"\r\n      borderTop=\"1px solid #ccc\"\r\n      mx={{ base: \"2px\", md: \"8px\" }}\r\n      py=\"0px\"\r\n      rounded=\"lg\"\r\n    >\r\n      {isLoading ? (\r\n        <Center>\r\n          <Spinner size=\"md\" />\r\n        </Center>\r\n      ) : (\r\n        commentList\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Comments;\r\n","import { Box, Avatar, Input, Button } from \"@chakra-ui/react\";\r\n\r\nimport React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport routeInstance from \"../../api/routes.instance\";\r\n\r\nfunction CommentInput(props) {\r\n  const userProfileImage = useSelector((state) => state.user.userProfileImage);\r\n  const userFullname = useSelector((state) => state.user.userFullname);\r\n\r\n  const { userName: username } = useSelector((state) => state.user);\r\n\r\n  const [text, setText] = useState(\"\");\r\n  let isDisabled = true;\r\n  if (text === \"\") {\r\n    isDisabled = true;\r\n  } else {\r\n    isDisabled = false;\r\n  }\r\n\r\n  const commentPostHandler = async () => {\r\n    try {\r\n      const response = await routeInstance({\r\n        method: \"post\",\r\n        url: `/api/comments/${props.postId}/new`,\r\n        data: {\r\n          commentText: text,\r\n        },\r\n      });\r\n\r\n      const data = await response.data;\r\n\r\n      props.appendComment(data);\r\n\r\n      setText(\"\");\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      width=\"100%\"\r\n      py=\"12px\"\r\n      mx=\"2px\"\r\n      display=\"flex\"\r\n      borderTop=\"1px solid #ccc\"\r\n    >\r\n      <Box p=\"5px\" display=\"flex\" alignItems=\"center\">\r\n        <Avatar size=\"xs\" name={userFullname} src={userProfileImage} mr=\"4px\" />\r\n      </Box>\r\n      <Box\r\n        p=\"8px\"\r\n        fontWeight=\"bold\"\r\n        fontSize={{\r\n          base: \"10px\",\r\n          sm: \"10px\",\r\n          md: \"12px\",\r\n        }}\r\n        flexShrink=\"1\"\r\n        justifyContent=\"center\"\r\n        alignContent=\"center\"\r\n        display={{ base: \"none\", lg: \"flex\" }}\r\n        overflow=\"hidden\"\r\n        maxWidth=\"140px\"\r\n      >\r\n        {username}\r\n      </Box>\r\n      <Box padding=\"6px\" w=\"100%\">\r\n        <Input\r\n          variant=\"flushed\"\r\n          placeholder=\"Add a comment\"\r\n          fontSize={{\r\n            base: \"10px\",\r\n            sm: \"10px\",\r\n            md: \"12px\",\r\n          }}\r\n          size=\"sm\"\r\n          onChange={(e) => setText(e.target.value)}\r\n          value={text}\r\n        />\r\n      </Box>\r\n      <Box>\r\n        <Button\r\n          color=\"blue\"\r\n          textAlign=\"center\"\r\n          cursor=\"pointer\"\r\n          p=\"8px\"\r\n          fontSize=\"14px\"\r\n          disabled={isDisabled}\r\n          onClick={commentPostHandler}\r\n        >\r\n          Post\r\n        </Button>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default CommentInput;\r\n","import { React } from \"react\";\r\nimport { Box, Text } from \"@chakra-ui/react\";\r\nimport Comment from \"./Comment\";\r\nimport _ from \"underscore\";\r\nfunction LatestComments(props) {\r\n  let latestComments = props.latestComments;\r\n  let commentList = [];\r\n  if (latestComments !== undefined) {\r\n    latestComments = _.first(latestComments, 4);\r\n\r\n    commentList = latestComments.reverse().map((comment) => {\r\n      return (\r\n        <Comment\r\n          postId={props.postId}\r\n          commentData={comment}\r\n          key={comment._id}\r\n          onCommentDelete={props.onLatestCommentDelete}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Box mx=\"8px\" py=\"0px\">\r\n      {latestComments && latestComments.length !== 0 ? (\r\n        <Text fontSize=\"xs\" mb=\"10px\" fontWeight=\"semibold\">\r\n          Recent comments\r\n        </Text>\r\n      ) : null}\r\n\r\n      {latestComments && <Box>{commentList}</Box>}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default LatestComments;\r\n","import {\r\n  Menu,\r\n  MenuButton,\r\n  MenuList,\r\n  MenuItem,\r\n  Icon,\r\n  Button,\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogContent,\r\n  AlertDialogOverlay,\r\n} from \"@chakra-ui/react\";\r\nimport { AiOutlineEllipsis } from \"react-icons/ai\";\r\n\r\nimport React, { Fragment, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { postDeleteActionHandler } from \"../../store/post-actions\";\r\n\r\nexport default function PostContextMenu({ postId, postDeletePossible }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const onClose = () => setIsOpen(false);\r\n  const cancelRef = React.useRef();\r\n\r\n  const postDeleteHandler = () => {\r\n    dispatch(postDeleteActionHandler(postId))\r\n      .then(() => {\r\n        setIsOpen(false);\r\n      })\r\n      .catch(() => {\r\n        setIsOpen(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <>\r\n        <AlertDialog\r\n          isOpen={isOpen}\r\n          leastDestructiveRef={cancelRef}\r\n          onClose={onClose}\r\n        >\r\n          <AlertDialogOverlay>\r\n            <AlertDialogContent>\r\n              <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n                Delete Post\r\n              </AlertDialogHeader>\r\n\r\n              <AlertDialogBody>\r\n                Are you sure? You can't undo this action afterwards.\r\n              </AlertDialogBody>\r\n\r\n              <AlertDialogFooter>\r\n                <Button ref={cancelRef} onClick={onClose}>\r\n                  Cancel\r\n                </Button>\r\n                <Button colorScheme=\"red\" onClick={postDeleteHandler} ml={3}>\r\n                  Delete\r\n                </Button>\r\n              </AlertDialogFooter>\r\n            </AlertDialogContent>\r\n          </AlertDialogOverlay>\r\n        </AlertDialog>\r\n      </>\r\n\r\n      <Menu>\r\n        <MenuButton>\r\n          <Icon\r\n            as={AiOutlineEllipsis}\r\n            fontSize=\"20px\"\r\n            className=\"action-icon\"\r\n          />\r\n        </MenuButton>\r\n        <MenuList>\r\n          {/* MenuItems are not rendered unless Menu is open */}\r\n          {postDeletePossible && (\r\n            <MenuItem onClick={() => setIsOpen(true)}>Delete Post</MenuItem>\r\n          )}\r\n          {/* <MenuItem>Open Post</MenuItem> */}\r\n          <MenuItem>Report</MenuItem>\r\n        </MenuList>\r\n      </Menu>\r\n    </Fragment>\r\n  );\r\n}\r\n","import { Box, Avatar, Text } from \"@chakra-ui/react\";\r\n\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport PostContextMenu from \"./PostContextMenu\";\r\n\r\nfunction PostHeader(props) {\r\n  const { username, userProfileSrc } = props;\r\n\r\n  return (\r\n    <Box\r\n      display=\"flex\"\r\n      justifyContent=\"space-between\"\r\n      px=\"6px\"\r\n      py={{ base: \"4px\", md: \"8px\" }}\r\n    >\r\n      <Box display=\"flex\" alignItems=\"center\" mb=\"12px\">\r\n        <Avatar\r\n          width=\"28px\"\r\n          height=\"28px\"\r\n          size=\"sm\"\r\n          mr=\"16px\"\r\n          className=\"action-icon\"\r\n          name={username}\r\n          src={userProfileSrc}\r\n        />\r\n        <Link to={`/profile/${username}`}>\r\n          <Text fontSize=\"14px\" fontWeight=\"500\" className=\"action-icon\">\r\n            {username}\r\n          </Text>\r\n        </Link>\r\n      </Box>\r\n      <Box className=\"action-icon\">\r\n        <PostContextMenu\r\n          postId={props.postId}\r\n          postDeletePossible={props.postDeletePossible}\r\n        />\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default PostHeader;\r\n","import React from \"react\";\r\nimport { Box, Skeleton, SkeletonCircle, SkeletonText } from \"@chakra-ui/react\";\r\n\r\nfunction PostSkeleton() {\r\n  return (\r\n    <Box\r\n      padding=\"6\"\r\n      boxShadow=\"lg\"\r\n      bg=\"white\"\r\n      width=\"600px\"\r\n      marginBottom=\"40px\"\r\n      height=\"600px\"\r\n      mx=\"auto\"\r\n    >\r\n      <Box d=\"flex\">\r\n        <SkeletonCircle size=\"10\" />\r\n        <SkeletonText mt=\"4\" ml=\"2\" width=\"100px\" noOfLines={1} spacing=\"4\" />\r\n      </Box>\r\n      <SkeletonText mt=\"4\" ml=\"2\" noOfLines={1} spacing=\"4\" />\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default PostSkeleton;\r\n","import React from \"react\";\r\n\r\nfunction PostImage({ imageSrc }) {\r\n  return <img src={imageSrc} className=\"timelinePostImage\" />;\r\n}\r\n\r\nexport default React.memo(PostImage);\r\n","import routeInstance from \"../api/routes.instance\";\r\nimport setToastData from \"../utils/showToast\";\r\n\r\nexport const getLatestComments = async (\r\n  dispatch,\r\n  postId,\r\n  setLatestComments\r\n) => {\r\n  try {\r\n    const response = await routeInstance({\r\n      url: `/api/comments/${postId}/latest`,\r\n      method: \"get\",\r\n    });\r\n\r\n    if (response) {\r\n      if (response.status === 200) {\r\n        const data = await response.data;\r\n        setLatestComments(data);\r\n      } else {\r\n        setToastData(dispatch);\r\n      }\r\n    }\r\n  } catch (err) {\r\n    console.log(err.message);\r\n  }\r\n};\r\n","import { Box, useStyleConfig } from \"@chakra-ui/react\";\r\n\r\nfunction PostBox(props) {\r\n  const styles = useStyleConfig(\"PostBox\");\r\n\r\n  // Pass the computed styles into the `__css` prop\r\n  return <Box __css={styles}>{props.children}</Box>;\r\n}\r\n\r\nexport default PostBox;\r\n","import React, { useCallback } from \"react\";\r\nimport { Box } from \"@chakra-ui/react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nimport { likeDislikePostHandler } from \"../../store/post-actions\";\r\nimport PostFooter from \"./PostFooter\";\r\nimport Comments from \"../Comment/Comments\";\r\nimport CommentInput from \"../Comment/CommentInput\";\r\nimport LatestComments from \"../Comment/LatestComments\";\r\nimport PostHeader from \"./PostHeader\";\r\nimport PostSkeleton from \"./PostSkeleton\";\r\n\r\nimport PostImage from \"./PostImage\";\r\nimport { getLatestComments } from \"../../store/comment-actions\";\r\nimport PostBox from \"./PostBox\";\r\n\r\nconst Post = ({ postData }, ref) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [isPostDataLoading, setIsPostDataLoading] = useState(true);\r\n  const [isLiked, setIsLiked] = useState(undefined);\r\n\r\n  const [likesCount, setLikesCount] = useState(postData.likes.length);\r\n  const [commentsVisibility, setCommentsVisibility] = useState(false);\r\n  const [latestComments, setLatestComments] = useState(undefined);\r\n  const userId = useSelector((state) => state.user.userId);\r\n\r\n  const { _id: postId, postDeletePossible } = postData;\r\n  const { username, profileImage: userProfileSrc } = postData.userId;\r\n\r\n  useEffect(() => {\r\n    if (isLiked === undefined) {\r\n      let likedConst = postData.likes.includes(userId);\r\n      if (postData) {\r\n        setIsLiked(likedConst);\r\n      }\r\n      setIsPostDataLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchLatestComments = async () => {\r\n      await setIsPostDataLoading(true);\r\n      await getLatestComments(dispatch, postId, setLatestComments);\r\n      await setIsPostDataLoading(false);\r\n    };\r\n\r\n    fetchLatestComments();\r\n  }, []);\r\n\r\n  const postLikeActivityHandler = () => {\r\n    async function likeDislikePost() {\r\n      dispatch(likeDislikePostHandler(postId));\r\n      setIsLiked((prevState) => !prevState);\r\n\r\n      if (isLiked) {\r\n        setLikesCount((prevCount) => (prevCount -= 1));\r\n      } else {\r\n        setLikesCount((prevCount) => (prevCount += 1));\r\n      }\r\n    }\r\n\r\n    likeDislikePost();\r\n  };\r\n\r\n  const commentsVisibilityHandler = () => {\r\n    setCommentsVisibility((prevState) => !prevState);\r\n  };\r\n\r\n  const newCommentAppendHandler = useCallback((newCommentData) => {\r\n    const latestCommentsTemp = [...latestComments];\r\n    latestCommentsTemp.unshift(newCommentData);\r\n    setLatestComments(latestCommentsTemp);\r\n  });\r\n\r\n  const latestCommentRemoveHandler = (commentId) => {\r\n    const latestCommentsTemp = [...latestComments];\r\n    const index = latestCommentsTemp.findIndex(\r\n      (comment) => comment._id === commentId\r\n    );\r\n    if (index === -1) {\r\n      return;\r\n    }\r\n\r\n    latestCommentsTemp.splice(index, 1);\r\n    setLatestComments(latestCommentsTemp);\r\n  };\r\n\r\n  const PostContent = React.forwardRef(() => {\r\n    return (\r\n      <div ref={ref}>\r\n        <Box>\r\n          <PostHeader\r\n            username={username}\r\n            userProfileSrc={userProfileSrc}\r\n            postId={postId}\r\n            postDeletePossible={postDeletePossible}\r\n          />\r\n\r\n          <Box fontSize=\"14px\" px=\"6px\" py=\"4px\">\r\n            {postData.desc}\r\n          </Box>\r\n\r\n          <Box overflow=\"hidden\">\r\n            <Box d=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n              <PostImage imageSrc={postData.postImage} />\r\n            </Box>\r\n          </Box>\r\n\r\n          <PostFooter\r\n            isLiked={isLiked}\r\n            setIsLiked={setIsLiked}\r\n            onLikeButtonClick={postLikeActivityHandler}\r\n            commentsVisibility={commentsVisibility}\r\n            onCommentButtonClick={commentsVisibilityHandler}\r\n            // isTouched={isTouched}\r\n          />\r\n\r\n          {commentsVisibility && postId && (\r\n            <Comments\r\n              postId={postId}\r\n              latestComments={latestComments}\r\n              onLatestCommentDelete={latestCommentRemoveHandler}\r\n            />\r\n          )}\r\n          {!commentsVisibility && postId && (\r\n            <LatestComments\r\n              postId={postId}\r\n              latestComments={latestComments}\r\n              onLatestCommentDelete={latestCommentRemoveHandler}\r\n            />\r\n          )}\r\n        </Box>\r\n        <Box>\r\n          <CommentInput\r\n            postId={postId}\r\n            appendComment={newCommentAppendHandler}\r\n          />\r\n        </Box>\r\n        <Box marginY=\"8px\" fontSize=\"13px\" mx=\"10px\">\r\n          {likesCount > 0 ? `${likesCount} likes` : \"No likes\"}\r\n        </Box>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <PostBox className=\"postDataContainer\">\r\n      {isPostDataLoading ? <PostSkeleton /> : <PostContent ref={ref} />}\r\n    </PostBox>\r\n  );\r\n};\r\n\r\nexport default React.forwardRef(Post);\r\n","import Post from \"../../Post/Post\";\r\n\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\n\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\n\r\nimport PostSkeleton from \"../../Post/PostSkeleton\";\r\n\r\nimport NoPostsFound from \"../../Profile/NoPostsFound\";\r\nimport { useRef } from \"react\";\r\nimport setToastData from \"../../../utils/showToast\";\r\nimport routeInstance from \"../../../api/routes.instance\";\r\nimport useFetchPosts from \"../../../hooks/useFetchPosts\";\r\nimport { interactivity } from \"@chakra-ui/react\";\r\n\r\nconst Feed = () => {\r\n  const [pageNum, setPageNum] = useState(1);\r\n\r\n  const { isLoading, isError, results, error, hasNextPage } =\r\n    useFetchPosts(pageNum);\r\n\r\n  const intObserver = useRef();\r\n  const lastPostRef = useCallback(\r\n    (post) => {\r\n      if (isLoading) return;\r\n      if (intObserver.current) intObserver.current.disconnect();\r\n\r\n      intObserver.current = new IntersectionObserver((posts) => {\r\n        if (posts[0].isIntersecting && hasNextPage) {\r\n          console.log(\"We are near the last post !\");\r\n          setPageNum((prev) => prev + 1);\r\n        }\r\n      });\r\n\r\n      if (post) {\r\n        intObserver.current.observe(post);\r\n      }\r\n    },\r\n    [isLoading, hasNextPage]\r\n  );\r\n\r\n  console.log(results[0]);\r\n\r\n  return (\r\n    <Box\r\n      flex=\"5\"\r\n      marginX={{ base: \"0px\" }}\r\n      bgColor=\"feedBackground.200\"\r\n      minHeight=\"90vh\"\r\n    >\r\n      {results.map((post, index) => {\r\n        const isLastPost = index === results.length - 1;\r\n        if (isLastPost) {\r\n          return (\r\n            <Post key={index + post._id} postData={post} ref={lastPostRef} />\r\n          );\r\n        }\r\n        return <Post key={index + post._id} postData={post} />;\r\n      })}\r\n      {hasNextPage && isLoading && (\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n          <Spinner\r\n            thickness=\"2px\"\r\n            speed=\"0.65s\"\r\n            emptyColor=\"gray.200\"\r\n            color=\"blue.500\"\r\n            size=\"xl\"\r\n          />\r\n        </Box>\r\n      )}\r\n\r\n      {!hasNextPage && (\r\n        <Box\r\n          padding=\"12px\"\r\n          style={{ textAlign: \"center\" }}\r\n          backgroundColor=\"navBackground.200\"\r\n        >\r\n          <Text fontSize=\"lg\">You are all caught up</Text>\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Feed;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport routeInstance from \"../api/routes.instance\";\r\n\r\nexport default function useFetchPosts(pageNum = 1) {\r\n  const [results, setResults] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isError, setIsError] = useState(false);\r\n  const [error, setError] = useState({});\r\n  const [hasNextPage, setHasNextPage] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setIsError(false);\r\n    setIsLoading(true);\r\n    setError({});\r\n\r\n    const controller = new AbortController();\r\n    const { signal } = controller;\r\n\r\n    const getPostsPage = async (pageNum = 1, signal = {}) => {\r\n      const response = await routeInstance.get(\r\n        `/api/posts/timeline?page=${pageNum}&count=2`,\r\n        signal\r\n      );\r\n\r\n      const data = await response.data;\r\n      return data.data;\r\n    };\r\n\r\n    getPostsPage(pageNum, signal)\r\n      .then((data) => {\r\n        setResults((prev) => [...prev, ...data]);\r\n        setHasNextPage(Boolean(data.length));\r\n        setIsLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        setIsLoading(false);\r\n        if (signal.aborted) return;\r\n        setIsError(true);\r\n        setError({ message: error.message });\r\n      });\r\n\r\n    return () => {\r\n      return controller.abort();\r\n    };\r\n  }, [pageNum]);\r\n  return { results, isLoading, isError, error, hasNextPage };\r\n}\r\n","import { Box } from \"@chakra-ui/layout\";\r\n\r\nconst Sidebar = () => {\r\n  return (\r\n    <Box\r\n      pos=\"sticky\"\r\n      display={{ base: \"none\", lg: \"block\" }}\r\n      top=\"0\"\r\n      left=\"0\"\r\n      height=\"100vh\"\r\n      width={{ sm: \"10px\", lg: \"250px\" }}\r\n      bgColor=\"feedBackground.200\"\r\n    ></Box>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Avatar, Box, Button } from \"@chakra-ui/react\";\r\nimport { UISliceActions } from \"../../../store/UISlice\";\r\n\r\nconst UserDetailsCard = ({ userData }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const userProfileImage = useSelector((state) => state.user.userProfileImage);\r\n\r\n  if (!userData) {\r\n    return <p>Loading</p>;\r\n  } else\r\n    return (\r\n      <Box\r\n        width=\"40vh\"\r\n        background=\"whiteAlpha.300\"\r\n        mt=\"10px\"\r\n        padding=\"10px\"\r\n        rounded=\"lg\"\r\n        border=\"1px solid #ccc\"\r\n        mb=\"24px\"\r\n        d=\"flex\"\r\n        bgColor=\"white\"\r\n      >\r\n        <Box d=\"flex\" flex=\"8\" alignItems=\"center\" p=\"10px\">\r\n          <Avatar size=\"md\" name={userData.username} src={userProfileImage} />\r\n\r\n          <Box height=\"fit-content\" ml=\"14px\">\r\n            {userData.userName}\r\n          </Box>\r\n        </Box>\r\n\r\n        <Box d=\"flex\" flex=\"4\" justifyContent=\"center\" alignItems=\"center\">\r\n          <Button\r\n            d=\"flex\"\r\n            alignItems=\"center\"\r\n            cursor=\"pointer\"\r\n            height=\"fit-content\"\r\n            padding=\"8px 10px\"\r\n            fontSize=\"12px\"\r\n            onClick={() =>\r\n              dispatch(\r\n                UISliceActions.setLogoutAlertVisibility({\r\n                  isLogoutAlertVisible: true,\r\n                })\r\n              )\r\n            }\r\n            outline=\"1px solid #ccc\"\r\n          >\r\n            Switch\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n    );\r\n};\r\n\r\nexport default UserDetailsCard;\r\n","import { Box, Text } from \"@chakra-ui/layout\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport UserDetailsCard from \"./UserDetailsCard\";\r\nimport SuggestedUserList from \"./SuggestedUserList\";\r\nimport { UISliceActions } from \"../../../store/UISlice\";\r\n\r\nimport \"./RightBar.css\";\r\n\r\nconst RightBar = () => {\r\n  const dispatch = useDispatch();\r\n  const userData = useSelector((state) => state.user);\r\n  const togglePostCreatorModalVisibility = () => {\r\n    dispatch(UISliceActions.toggleModalVisibility());\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      flex=\"5\"\r\n      height=\"calc(100vh - 40px)\"\r\n      position=\"sticky\"\r\n      top=\"48px\"\r\n      display={{ base: \"none\", lg: \"flex\" }}\r\n      flexDirection=\"column\"\r\n      paddingLeft=\"5vw\"\r\n      className=\"RightBarWrapper\"\r\n      bgColor=\"feedBackground.200\"\r\n      overflow=\"none\"\r\n    >\r\n      <UserDetailsCard userData={userData} />\r\n      <Box\r\n        width=\"40vh\"\r\n        className=\"rightBarComponents\"\r\n        flex=\"4\"\r\n        rounded=\"lg\"\r\n        border=\"1px solid #ccc\"\r\n        p=\"14px\"\r\n        mb=\"24px\"\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        bgColor=\"white\"\r\n        boxShadow=\"rgba(0, 0, 0, 0.15) 0px 2px 8px;\"\r\n      >\r\n        <Text textAlign=\"center\" fontSize=\"20px\" mb=\"16px\" p=\"5px\">\r\n          Create a new post\r\n        </Text>\r\n        <Box\r\n          display=\"flex\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n          flexGrow=\"1\"\r\n        >\r\n          <Button\r\n            width=\"100%\"\r\n            backgroundColor=\"blue\"\r\n            color=\"white\"\r\n            boxShadow=\"0px 2px 5px gray\"\r\n            onClick={togglePostCreatorModalVisibility}\r\n            _hover={{\r\n              bgGradient: \"linear(to-r, #7928CA , #FF0080 )\",\r\n            }}\r\n            _active={{\r\n              pos: \"relative\",\r\n              top: \"3px\",\r\n              bgGradient: \"linear(to-r, #7928CA , #FF0080)\",\r\n            }}\r\n          >\r\n            Create A Post\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n\r\n      <Box\r\n        borderWidth=\"2px\"\r\n        padding=\"14px\"\r\n        rounded=\"lg\"\r\n        border=\"1px solid #ccc\"\r\n        mb=\"24px\"\r\n        width=\"40vh\"\r\n        className=\"rightBarComponents\"\r\n        flex=\"6\"\r\n        bgColor=\"white\"\r\n      >\r\n        <Text textAlign=\"center\" fontSize=\"20px\" mb=\"16px\" p=\"5px\">\r\n          People you may know\r\n        </Text>\r\n\r\n        <SuggestedUserList count={4} />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default RightBar;\r\n","import { Box } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\n\r\nimport Feed from \"../components/Feed/Timeline/Feed\";\r\nimport Sidebar from \"../components/Feed/Sidebar/Sidebar\";\r\nimport RightBar from \"../components/Feed/RightBar/RightBar\";\r\n\r\nconst FeedPage = () => {\r\n  console.log(\"feed page rerendered\");\r\n  return (\r\n    <Box d=\"flex\" pos=\"relative\">\r\n      <Sidebar />\r\n      <Feed />\r\n      <RightBar />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default React.memo(FeedPage);\r\n"],"sourceRoot":""}