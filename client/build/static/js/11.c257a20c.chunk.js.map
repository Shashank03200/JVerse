{"version":3,"sources":["store/post-actions.js","hooks/useUploadImage.js","components/VisualFeedback/NewPostCreator.js"],"names":["createNewPost","formData","dispatch","setProcess","setLoadingProcess","routeInstance","post","then","response","data","resData","setResultProcess","UISliceActions","toggleModalVisibility","feedSliceActions","addNewPost","catch","error","console","log","likeDislikePostHandler","postId","url","method","headers","postDeleteActionHandler","Promise","resolve","reject","status","deletePost","commentDeleteActionHandler","commentId","setToastData","useUploadImage","useState","errorText","undefined","imageError","setImageError","setImageFilename","imageSrc","setImageSrc","useEffect","setTimeout","imageChangeHandler","event","file","target","files","reader","FileReader","addEventListener","includes","type","size","result","name","readAsDataURL","NewPostCreator","useDispatch","history","useHistory","isModalOpen","useSelector","state","UISlice","caption","setCaption","imageRef","useRef","togglePostCreatorModalVisibility","closeOnOverlayClick","isOpen","onClose","pb","mt","encType","onSubmit","preventDefault","FormData","append","postImage","push","autoComplete","action","placeholder","onChange","e","value","minHeight","p","textAlign","id","isRequired","hidden","className","htmlFor","as","MdFileUpload","base","md","fontSize","fontWeight","d","color","src","objectFit","ref","alt","colorScheme","mr","disabled","onClick"],"mappings":"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","file":"static/js/11.c257a20c.chunk.js","sourcesContent":["import routeInstance from \"../api/routes.instance\";\r\nimport setToastData from \"../utils/showToast\";\r\nimport { feedSliceActions } from \"./feedSlice\";\r\n\r\nimport setProcess from \"../utils/setProcess\";\r\nimport { UISliceActions } from \"./UISlice\";\r\n\r\nexport const createNewPost = (formData) => async (dispatch) => {\r\n  setProcess.setLoadingProcess(dispatch, \"Uploading your post\");\r\n  routeInstance\r\n    .post(\"/api/posts/newpost\", formData)\r\n    .then(async (response) => {\r\n      const resData = await response.data;\r\n\r\n      setProcess.setResultProcess(dispatch, true, \"Post Uploaded\");\r\n      dispatch(UISliceActions.toggleModalVisibility());\r\n      dispatch(feedSliceActions.addNewPost(resData.data));\r\n    })\r\n    .catch((error) => {\r\n      console.log(error);\r\n\r\n      setProcess.setResultProcess(dispatch, false, \"Upload Error\");\r\n    });\r\n};\r\n\r\nexport const checkLikeStatus = async (postId) => {\r\n  try {\r\n    const accessToken = localStorage.getItem(\"accessToken\");\r\n\r\n    const response = await routeInstance(`/api/posts/${postId}/likestatus`, {\r\n      headers: { Authorization: \"Bearer \" + accessToken },\r\n    });\r\n\r\n    const data = await response.data;\r\n\r\n    if (data.likeState === true) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const likeDislikePostHandler = (postId) => async (dispatch) => {\r\n  try {\r\n    const response = await routeInstance({\r\n      url: `/api/posts/${postId}/like`,\r\n      method: \"POST\",\r\n      headers: {},\r\n    });\r\n\r\n    console.log(response);\r\n    const data = await response.data;\r\n\r\n    console.log(data);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const postDeleteActionHandler = (postId) => {\r\n  return (dispatch) => {\r\n    return new Promise(async (resolve, reject) => {\r\n      setProcess.setLoadingProcess(dispatch, \"Deleting your post\");\r\n      try {\r\n        const response = await routeInstance({\r\n          url: `/api/posts/${postId}`,\r\n          method: \"DELETE\",\r\n          headers: {},\r\n        });\r\n\r\n        if (response.status === 200) {\r\n          dispatch(feedSliceActions.deletePost(postId));\r\n          setProcess.setResultProcess(dispatch, true, \"Post Deleted\");\r\n          return resolve(\"Post deleted\");\r\n        }\r\n      } catch (error) {\r\n        setProcess.setResultProcess(dispatch, false, \"Operation failed\");\r\n      }\r\n    });\r\n  };\r\n};\r\n\r\nexport const commentDeleteActionHandler = (commentId, postId) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await routeInstance({\r\n        method: \"delete\",\r\n        url: `/api/comments/${commentId}`,\r\n        headers: {},\r\n        data: {\r\n          postId,\r\n        },\r\n      });\r\n      const resData = await response.data;\r\n      setToastData(dispatch, { ...resData });\r\n    } catch (err) {\r\n      setToastData(dispatch);\r\n    }\r\n  };\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nfunction useUploadImage() {\r\n  const [imageError, setImageError] = useState({\r\n    status: false,\r\n    errorText: undefined,\r\n  });\r\n  const [imageFilename, setImageFilename] = useState(\"\");\r\n  const [imageSrc, setImageSrc] = useState(\"\");\r\n\r\n  const imageChangeHandler = (event) => {\r\n    const file = event.target.files[0];\r\n\r\n    if (file !== undefined) {\r\n      const reader = new FileReader(file);\r\n\r\n      reader.addEventListener(\"load\", () => {\r\n        const allowedFileTypes = [\"image/png\", \"image/jpeg\"];\r\n        if (!allowedFileTypes.includes(file.type)) {\r\n          setImageError({\r\n            status: true,\r\n            errorText: \"Only images should be uploaded\",\r\n          });\r\n          return;\r\n        }\r\n\r\n        if (file.size > 4000000) {\r\n          setImageError({\r\n            status: true,\r\n            errorText: \"Image size should not be more than 4mb\",\r\n          });\r\n          return;\r\n        }\r\n\r\n        setImageError({ status: false, errorText: undefined });\r\n        setImageSrc(reader.result);\r\n        setImageFilename(file.name);\r\n      });\r\n\r\n      reader.readAsDataURL(file);\r\n    } else {\r\n      setImageSrc(\"\");\r\n      setImageFilename(\"\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (imageError.status === true) {\r\n      setTimeout(() => {\r\n        setImageError({ status: false, errorText: undefined });\r\n      }, 1500);\r\n    }\r\n  }, [imageError.status]);\r\n\r\n  return {\r\n    imageError,\r\n    setImageFilename,\r\n    setImageError,\r\n    imageChangeHandler,\r\n    imageSrc,\r\n    setImageSrc,\r\n  };\r\n}\r\n\r\nexport default useUploadImage;\r\n","import { Box, Icon, Button, Text, Input } from \"@chakra-ui/react\";\r\nimport React, { useRef, useState } from \"react\";\r\nimport { MdFileUpload } from \"react-icons/md\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n} from \"@chakra-ui/react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { createNewPost } from \"../../store/post-actions\";\r\n\r\nimport { UISliceActions } from \"../../store/UISlice\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport useUploadImage from \"../../hooks/useUploadImage\";\r\n\r\nconst NewPostCreator = () => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const isModalOpen = useSelector((state) => state.UISlice.isModalOpen);\r\n  const {\r\n    imageError,\r\n    setImageFilename,\r\n    setImageError,\r\n    imageChangeHandler,\r\n    imageSrc,\r\n    setImageSrc,\r\n  } = useUploadImage();\r\n\r\n  const [caption, setCaption] = useState(\"\");\r\n\r\n  const imageRef = useRef();\r\n\r\n  const togglePostCreatorModalVisibility = () => {\r\n    setImageSrc(\"\");\r\n    setCaption(\"\");\r\n    setImageFilename(\"\");\r\n    dispatch(UISliceActions.toggleModalVisibility());\r\n  };\r\n\r\n  const postSubmitHandler = (event) => {\r\n    event.preventDefault();\r\n    if (imageSrc === \"\") {\r\n      setImageError({ status: true, errorText: \"Please select a image\" });\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"desc\", caption);\r\n    formData.append(\"postImage\", event.target.postImage.files[0]);\r\n\r\n    dispatch(createNewPost(formData)).then(() => {\r\n      setImageSrc(\"\");\r\n      setImageFilename(\"\");\r\n      setCaption(\"\");\r\n      history.push(\"/\");\r\n      // document.querySelector(\"\").scrollTo(0, 0)\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      closeOnOverlayClick={false}\r\n      isOpen={isModalOpen}\r\n      size=\"xl\"\r\n      onClose={togglePostCreatorModalVisibility}\r\n    >\r\n      <ModalOverlay />\r\n\r\n      <ModalContent>\r\n        <ModalHeader>Create your post</ModalHeader>\r\n        <ModalCloseButton />\r\n        <ModalBody pb={6}>\r\n          <Box mt=\"3\">\r\n            <form\r\n              encType=\"multipart/form-data\"\r\n              method=\"POST\"\r\n              onSubmit={postSubmitHandler}\r\n              autoComplete=\"off\"\r\n              action=\"/api/posts/newpost\"\r\n            >\r\n              <Input\r\n                placeholder=\"Add a caption\"\r\n                name=\"caption\"\r\n                size=\"sm\"\r\n                onChange={(e) => {\r\n                  setCaption(e.target.value);\r\n                }}\r\n                value={caption}\r\n              />\r\n\r\n              <Box minHeight=\"60vh\" p=\"16px\" textAlign=\"center\">\r\n                <input\r\n                  type=\"file\"\r\n                  id=\"actual-btn\"\r\n                  name=\"postImage\"\r\n                  isRequired={true}\r\n                  hidden\r\n                  onChange={imageChangeHandler}\r\n                />\r\n\r\n                <label className=\"fileLabel\" htmlFor=\"actual-btn\">\r\n                  <Icon as={MdFileUpload} />\r\n                  &nbsp;&nbsp;\r\n                  <span>Select an image</span>\r\n                </label>\r\n                <Text\r\n                  mt={{ base: \"14px\", md: \"18px\" }}\r\n                  fontSize=\"sm\"\r\n                  id=\"file-chosen\"\r\n                >\r\n                  <Text fontWeight={500} d=\"inline\">\r\n                    {/* {imageSrc && \"Filename:    \"} */}\r\n                  </Text>\r\n                  {/* {imageFilename} */}\r\n                </Text>\r\n                {imageError.status && (\r\n                  <Text color=\"red.500\" fontSize=\"12px\">\r\n                    {imageError.errorText}\r\n                  </Text>\r\n                )}\r\n\r\n                <div className=\"postUploadFlex\">\r\n                  {/* {isImageLoading && <Spinner size=\"lg\" />} */}\r\n                  <div className=\"postUploadImageConatainer\">\r\n                    {imageSrc && (\r\n                      <img\r\n                        src={imageSrc}\r\n                        objectFit=\"contain\"\r\n                        ref={imageRef}\r\n                        alt=\"coint\"\r\n                        className=\"postUploadImage\"\r\n                      />\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </Box>\r\n              <ModalFooter>\r\n                <Button\r\n                  colorScheme=\"blue\"\r\n                  mr={3}\r\n                  type=\"submit\"\r\n                  disabled={imageError.status}\r\n                >\r\n                  Create Post\r\n                </Button>\r\n                <Button onClick={togglePostCreatorModalVisibility}>\r\n                  Cancel\r\n                </Button>\r\n              </ModalFooter>\r\n            </form>\r\n          </Box>\r\n        </ModalBody>\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default NewPostCreator;\r\n"],"sourceRoot":""}