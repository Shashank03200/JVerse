{"version":3,"sources":["store/auth-actions.js","components/VisualFeedback/LogoutAlert.js"],"names":["signUser","requestObject","dispatch","a","authSliceActions","setAuthLoadingBtnState","axios","response","data","resData","setToken","accessToken","refreshToken","setToastData","loginUser","checkSession","errorData","logoutUser","signOutUser","getTokens","setProcess","setLoadingProcess","routeInstance","method","url","console","log","userSliceActions","setUserData","userId","userProfileImage","userName","userFullName","bio","undefined","setResultProcess","LogoutAlert","props","isOpen","onClose","useDispatch","history","useHistory","colorScheme","mr","onClick","then","removeTokens","resetUserData","replace"],"mappings":"oRAWaA,EAAW,SAACC,GACvB,8CAAO,WAAOC,GAAP,mBAAAC,EAAA,sEAEHD,EAASE,IAAiBC,wBAAuB,IAF9C,SAGoBC,IAAML,GAH1B,cAGGM,EAHH,gBAImBA,EAASC,KAJ5B,cAIGC,EAJH,OAMHC,YAASD,EAAQD,KAAKG,YAAaF,EAAQD,KAAKI,cAChDC,YAAaX,EAAUO,GACvBP,EAASE,IAAiBU,aARvB,UASGC,YAAab,GAThB,QAUHA,EAASE,IAAiBC,wBAAuB,IAV9C,kDAYGW,EAAY,KAAIT,SAASC,KAC/BK,YAAaX,EAAD,eAAgBc,IAC5Bd,EAASE,IAAiBC,wBAAuB,IACjDD,IAAiBa,aAfd,0DAAP,uDAoBWC,EAAc,WACzB,8CAAO,WAAOhB,GAAP,iBAAAC,EAAA,sEAEGS,EAAeO,cAAYP,aACjCQ,IAAWC,kBAAkBnB,EAAU,eAHpC,SAIoBoB,YAAc,CACnCC,OAAQ,OACRC,IAAK,mBACLhB,KAAM,CAAEI,kBAPP,OAIGL,EAJH,OASHkB,QAAQC,IAAI,WAAYnB,GACxBL,EACEyB,IAAiBC,YAAY,CAC3BC,OAAQ,KACRC,iBAAkB,KAClBC,SAAU,KACVC,aAAc,KACdC,SAAKC,KAGTd,IAAWe,iBAAiBjC,GAAU,EAAM,cAnBzC,kDAqBHkB,IAAWe,iBAAiBjC,GAAU,EAAO,uBAC7CW,YAAaX,GAtBV,0DAAP,wD,iCCjCF,yFAyDekC,UAtCf,SAAqBC,GACnB,IAAQC,EAAoBD,EAApBC,OAAQC,EAAYF,EAAZE,QAEVrC,EAAWsC,cACXC,EAAUC,cAWhB,OACE,mCACE,eAAC,IAAD,CAAOJ,OAAQA,EAAQC,QAASA,EAAhC,UACE,cAAC,IAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,2BACA,cAAC,IAAD,IACA,cAAC,IAAD,wCAEA,eAAC,IAAD,WACE,cAAC,IAAD,CAAQI,YAAY,OAAOC,GAAI,EAAGC,QApBlB,WACxB3C,EAASgB,eAAe4B,MAAK,WAC3BC,cACA7C,EAASyB,IAAiBqB,iBAC1B9C,EAASE,IAAiBa,cAC1BoB,EAAME,UACNE,EAAQQ,QAAQ,cAcV,oBAGA,cAAC,IAAD,CAAQJ,QAASN,EAASI,YAAY,SAAtC","file":"static/js/15.d85c78c5.chunk.js","sourcesContent":["import { authSliceActions } from \"./authSlice\";\r\n\r\nimport setToastData from \"../utils/showToast\";\r\nimport axios from \"axios\";\r\nimport { getTokens, setToken } from \"../utils/handleTokens\";\r\nimport checkSession from \"../utils/checkSession\";\r\nimport routeInstance from \"../routes.instance\";\r\nimport setProcess from \"../utils/setProcess\";\r\n\r\nimport { userSliceActions } from \"./userSlice\";\r\n\r\nexport const signUser = (requestObject) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch(authSliceActions.setAuthLoadingBtnState(true));\r\n      const response = await axios(requestObject);\r\n      const resData = await response.data;\r\n\r\n      setToken(resData.data.accessToken, resData.data.refreshToken);\r\n      setToastData(dispatch, resData);\r\n      dispatch(authSliceActions.loginUser());\r\n      await checkSession(dispatch);\r\n      dispatch(authSliceActions.setAuthLoadingBtnState(false));\r\n    } catch (err) {\r\n      const errorData = err.response.data;\r\n      setToastData(dispatch, { ...errorData });\r\n      dispatch(authSliceActions.setAuthLoadingBtnState(false));\r\n      authSliceActions.logoutUser();\r\n    }\r\n  };\r\n};\r\n\r\nexport const signOutUser = () => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const refreshToken = getTokens().refreshToken;\r\n      setProcess.setLoadingProcess(dispatch, \"Logging out\");\r\n      const response = await routeInstance({\r\n        method: \"post\",\r\n        url: \"/api/auth/logout\",\r\n        data: { refreshToken },\r\n      });\r\n      console.log(\"response\", response);\r\n      dispatch(\r\n        userSliceActions.setUserData({\r\n          userId: null,\r\n          userProfileImage: null,\r\n          userName: null,\r\n          userFullName: null,\r\n          bio: undefined,\r\n        })\r\n      );\r\n      setProcess.setResultProcess(dispatch, true, \"Logged out\");\r\n    } catch (err) {\r\n      setProcess.setResultProcess(dispatch, false, \"Action Unauthorized\");\r\n      setToastData(dispatch);\r\n    }\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n} from \"@chakra-ui/react\";\r\nimport { Button } from \"@chakra-ui/react\";\r\n\r\nimport { authSliceActions } from \"../../store/authSlice\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { signOutUser } from \"../../store/auth-actions\";\r\nimport { removeTokens } from \"../../utils/handleTokens\";\r\nimport { userSliceActions } from \"../../store/userSlice\";\r\n\r\nfunction LogoutAlert(props) {\r\n  const { isOpen, onClose } = props;\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const userLogoutHandler = () => {\r\n    dispatch(signOutUser()).then(() => {\r\n      removeTokens();\r\n      dispatch(userSliceActions.resetUserData());\r\n      dispatch(authSliceActions.logoutUser());\r\n      props.onClose();\r\n      history.replace(\"/login\");\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal isOpen={isOpen} onClose={onClose}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Confirmation</ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody>Are you sure to log out ?</ModalBody>\r\n\r\n          <ModalFooter>\r\n            <Button colorScheme=\"blue\" mr={3} onClick={userLogoutHandler}>\r\n              Logout\r\n            </Button>\r\n            <Button onClick={onClose} colorScheme=\"yellow\">\r\n              Close\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default LogoutAlert;\r\n"],"sourceRoot":""}